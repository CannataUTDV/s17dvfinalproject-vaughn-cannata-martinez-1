<?xml version='1.0' encoding='utf-8' ?>

<!-- build 10100.17.0327.0758                               -->
<workbook source-build='10.1.7 (10100.17.0327.0758)' source-platform='mac' version='10.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='10.1'>
      <aliases enabled='yes' />
      <column caption='Minimum Restaurants' datatype='real' name='[Parameter 1]' param-domain-type='range' role='measure' type='quantitative' value='154.42371185592796'>
        <calculation class='tableau' formula='154.42371185592796' />
        <range max='393.0' min='4.0' />
      </column>
      <column caption='Safety Index: Low' datatype='real' name='[Parameter 2]' param-domain-type='range' role='measure' type='quantitative' value='3.0'>
        <calculation class='tableau' formula='3.0' />
        <range max='5.0' min='1.0' />
      </column>
      <column caption='Safety Index: Medium' datatype='real' name='[Parameter 3]' param-domain-type='range' role='measure' type='quantitative' value='8.0'>
        <calculation class='tableau' formula='8.0' />
        <range max='10.0' min='5.0' />
      </column>
    </datasource>
    <datasource caption='Aggregates by zip' inline='true' name='federated.1nvb9cy1tthgcj1fqoo5e1a8eobq' version='10.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='data.world connector' name='webdata-direct.12t7vpz0s3pxmh1e8f09l0zftsq9'>
            <connection APIVersion='' authType='none' authentication='no' channel='https' class='webdata-direct' connectionData='{&quot;dataset&quot;:&quot;kvaughn/finalproject&quot;,&quot;apiToken&quot;:&quot;eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJwcm9kLXVzZXItY2xpZW50Omt2YXVnaG4iLCJpc3MiOiJhZ2VudDprdmF1Z2huOjo2ZGQ3N2FjZS1kYjFkLTQ2ZTktODZmZi04MzIzYzQ2MTYyN2UiLCJpYXQiOjE0ODQ2OTcyNzUsInJvbGUiOlsidXNlcl9hcGlfd3JpdGUiLCJ1c2VyX2FwaV9yZWFkIl0sImdlbmVyYWwtcHVycG9zZSI6dHJ1ZX0.FGeVf26qEOhxgRU9idrxcL75Jp84MOak_L0bGoZ33Yi1VFM9_McW7-vEtv3_AbkRH1NPfzWDy2Vn8LHSWGcAZg&quot;}' connectionName='&quot;kvaughn/finalproject&quot;' filename='' increment-key='' path='/' port='443' scriptVersion='' secondary_whitelist='' server='tableau.data.world' urlQuery='' username='' usernameAlias='' />
          </named-connection>
        </named-connections>
        <relation join='inner' type='join'>
          <clause type='join'>
            <expression op='='>
              <expression op='[stops-restaurants-pop].[v_0]' />
              <expression op='[foreignbirth].[v_0]' />
            </expression>
          </clause>
          <relation connection='webdata-direct.12t7vpz0s3pxmh1e8f09l0zftsq9' name='stops-restaurants-pop' table='[stopsrestaurantspop]' type='table' />
          <relation connection='webdata-direct.12t7vpz0s3pxmh1e8f09l0zftsq9' name='foreignbirth' table='[foreignbirth]' type='table' />
        </relation>
        <cols>
          <map key='[v_0 (foreignbirth)]' value='[foreignbirth].[v_0]' />
          <map key='[v_0]' value='[stops-restaurants-pop].[v_0]' />
          <map key='[v_1 (foreignbirth)]' value='[foreignbirth].[v_1]' />
          <map key='[v_1]' value='[stops-restaurants-pop].[v_1]' />
          <map key='[v_2 (foreignbirth)]' value='[foreignbirth].[v_2]' />
          <map key='[v_2]' value='[stops-restaurants-pop].[v_2]' />
          <map key='[v_3 (foreignbirth)]' value='[foreignbirth].[v_3]' />
          <map key='[v_3]' value='[stops-restaurants-pop].[v_3]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>v_0</remote-name>
            <remote-type>0</remote-type>
            <local-name>[v_0]</local-name>
            <parent-name>[stops-restaurants-pop]</parent-name>
            <remote-alias>Zip Code</remote-alias>
            <ordinal>0</ordinal>
            <caption>Zip Code</caption>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;int&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_1</remote-name>
            <remote-type>0</remote-type>
            <local-name>[v_1]</local-name>
            <parent-name>[stops-restaurants-pop]</parent-name>
            <remote-alias>stops</remote-alias>
            <ordinal>1</ordinal>
            <caption>stops</caption>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;int&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_2</remote-name>
            <remote-type>0</remote-type>
            <local-name>[v_2]</local-name>
            <parent-name>[stops-restaurants-pop]</parent-name>
            <remote-alias>restaurants</remote-alias>
            <ordinal>2</ordinal>
            <caption>restaurants</caption>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;int&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_3</remote-name>
            <remote-type>0</remote-type>
            <local-name>[v_3]</local-name>
            <parent-name>[stops-restaurants-pop]</parent-name>
            <remote-alias>ZPOP</remote-alias>
            <ordinal>3</ordinal>
            <caption>ZPOP</caption>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;int&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_0</remote-name>
            <remote-type>0</remote-type>
            <local-name>[v_0 (foreignbirth)]</local-name>
            <parent-name>[foreignbirth]</parent-name>
            <remote-alias>Zip Code</remote-alias>
            <ordinal>4</ordinal>
            <caption>Zip Code</caption>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;int&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_1</remote-name>
            <remote-type>0</remote-type>
            <local-name>[v_1 (foreignbirth)]</local-name>
            <parent-name>[foreignbirth]</parent-name>
            <remote-alias>Native</remote-alias>
            <ordinal>5</ordinal>
            <caption>Native</caption>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;int&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_2</remote-name>
            <remote-type>0</remote-type>
            <local-name>[v_2 (foreignbirth)]</local-name>
            <parent-name>[foreignbirth]</parent-name>
            <remote-alias>Naturalized</remote-alias>
            <ordinal>6</ordinal>
            <caption>Naturalized</caption>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;int&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_3</remote-name>
            <remote-type>0</remote-type>
            <local-name>[v_3 (foreignbirth)]</local-name>
            <parent-name>[foreignbirth]</parent-name>
            <remote-alias>Noncitizens</remote-alias>
            <ordinal>7</ordinal>
            <caption>Noncitizens</caption>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;int&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Stop/Restaurant Ratio' datatype='real' name='[Calculation_60165344307113984]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([v_1])/SUM([v_2])' />
      </column>
      <column caption='Floor' datatype='string' name='[Calculation_879046420456546304]' role='measure' type='nominal'>
        <calculation class='tableau' formula='if sum([v_2]) &lt; [Parameters].[Parameter 1] then &quot;02 Below Minimum&quot;&#10;else &quot;01 Above Minimum&quot;&#10;end' />
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column aggregation='Sum' caption='Zip Code' datatype='integer' name='[v_0 (foreignbirth)]' role='dimension' type='ordinal' />
      <column aggregation='Sum' caption='Zip Code' datatype='integer' name='[v_0]' role='dimension' type='ordinal' />
      <column caption='Native' datatype='integer' name='[v_1 (foreignbirth)]' role='measure' type='quantitative' />
      <column caption='stops' datatype='integer' name='[v_1]' role='measure' type='quantitative' />
      <column caption='Naturalized' datatype='integer' name='[v_2 (foreignbirth)]' role='measure' type='quantitative' />
      <column caption='restaurants' datatype='integer' name='[v_2]' role='measure' type='quantitative' />
      <column caption='Noncitizens' datatype='integer' name='[v_3 (foreignbirth)]' role='measure' type='quantitative' />
      <column caption='ZPOP' datatype='integer' name='[v_3]' role='measure' type='quantitative' />
      <column-instance column='[LargerThanAverage]' derivation='InOut' name='[io:LargerThanAverage:nk]' pivot='key' type='nominal'>
        <aliases>
          <alias key='false' value='At or Below Average Foreign Population' />
          <alias key='true' value='Higher Than Average Foreign Population' />
        </aliases>
      </column-instance>
      <group caption='LargerThanAverageNonCitizenPop' name='[LargerThanAverage]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter function='member' level='[v_0 (foreignbirth)]' member='78613' />
          <groupfilter function='member' level='[v_0 (foreignbirth)]' member='78617' />
          <groupfilter function='member' level='[v_0 (foreignbirth)]' member='78660' />
          <groupfilter function='member' level='[v_0 (foreignbirth)]' member='78723' />
          <groupfilter function='member' level='[v_0 (foreignbirth)]' member='78724' />
          <groupfilter function='member' level='[v_0 (foreignbirth)]' member='78727' />
          <groupfilter function='member' level='[v_0 (foreignbirth)]' member='78741' />
          <groupfilter function='member' level='[v_0 (foreignbirth)]' member='78744' />
          <groupfilter function='member' level='[v_0 (foreignbirth)]' member='78745' />
          <groupfilter function='member' level='[v_0 (foreignbirth)]' member='78752' />
          <groupfilter function='member' level='[v_0 (foreignbirth)]' member='78753' />
          <groupfilter function='member' level='[v_0 (foreignbirth)]' member='78758' />
        </groupfilter>
      </group>
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='/Users/kate/CSVs/Datasources/extract_0stmk9p0hsayem1ac8bbp0fpjca4.tde' schema='Extract' tablename='Extract' update-time='04/26/2017 08:06:12 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <cols>
            <map key='[v_0 (foreignbirth)]' value='[Extract].[v_0]' />
            <map key='[v_0]' value='[Extract].[v_01]' />
            <map key='[v_1 (foreignbirth)]' value='[Extract].[v_1]' />
            <map key='[v_1]' value='[Extract].[v_11]' />
            <map key='[v_2 (foreignbirth)]' value='[Extract].[v_2]' />
            <map key='[v_2]' value='[Extract].[v_21]' />
            <map key='[v_3 (foreignbirth)]' value='[Extract].[v_3]' />
            <map key='[v_3]' value='[Extract].[v_31]' />
          </cols>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='42' timestamp-start='2017-04-26 20:06:12.607' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>v_0</remote-name>
              <remote-type>3</remote-type>
              <local-name>[v_0 (foreignbirth)]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_0</remote-alias>
              <ordinal>0</ordinal>
              <family>foreignbirth</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>42</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>3306353.0</statistic>
                <statistic aggregation='Avg' datatype='real'>78722.690476190473</statistic>
                <statistic aggregation='Min' datatype='integer'>78613</statistic>
                <statistic aggregation='Max' datatype='integer'>78759</statistic>
                <statistic aggregation='Stdev' datatype='real'>36.530300216588053</statistic>
                <statistic aggregation='StdevP' datatype='real'>36.092795808818302</statistic>
                <statistic aggregation='Var' datatype='real'>1334.4628339140534</statistic>
                <statistic aggregation='VarP' datatype='real'>1302.6899092970521</statistic>
                <statistic aggregation='Count' datatype='integer'>42</statistic>
                <statistic aggregation='Median' datatype='integer'>78731</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>260285058537.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>0</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (unique)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_01</remote-name>
              <remote-type>3</remote-type>
              <local-name>[v_0]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_01</remote-alias>
              <ordinal>1</ordinal>
              <family>stops-restaurants-pop</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>42</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>3306353.0</statistic>
                <statistic aggregation='Avg' datatype='real'>78722.690476190473</statistic>
                <statistic aggregation='Min' datatype='integer'>78613</statistic>
                <statistic aggregation='Max' datatype='integer'>78759</statistic>
                <statistic aggregation='Stdev' datatype='real'>36.530300216588053</statistic>
                <statistic aggregation='StdevP' datatype='real'>36.092795808818302</statistic>
                <statistic aggregation='Var' datatype='real'>1334.4628339140534</statistic>
                <statistic aggregation='VarP' datatype='real'>1302.6899092970521</statistic>
                <statistic aggregation='Count' datatype='integer'>42</statistic>
                <statistic aggregation='Median' datatype='integer'>78731</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>260285058537.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (unique)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_1</remote-name>
              <remote-type>3</remote-type>
              <local-name>[v_1 (foreignbirth)]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_1</remote-alias>
              <ordinal>2</ordinal>
              <family>foreignbirth</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>42</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>963168.0</statistic>
                <statistic aggregation='Avg' datatype='real'>22932.571428571428</statistic>
                <statistic aggregation='Min' datatype='integer'>589</statistic>
                <statistic aggregation='Max' datatype='integer'>63915</statistic>
                <statistic aggregation='Stdev' datatype='real'>15162.375071598997</statistic>
                <statistic aggregation='StdevP' datatype='real'>14980.783190701437</statistic>
                <statistic aggregation='Var' datatype='real'>229897617.8118467</statistic>
                <statistic aggregation='VarP' datatype='real'>224423865.00680271</statistic>
                <statistic aggregation='Count' datatype='integer'>42</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>31513721288.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (unique)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_11</remote-name>
              <remote-type>2</remote-type>
              <local-name>[v_1]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_11</remote-alias>
              <ordinal>3</ordinal>
              <family>stops-restaurants-pop</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>35</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>2579.0</statistic>
                <statistic aggregation='Avg' datatype='real'>61.404761904761905</statistic>
                <statistic aggregation='Min' datatype='integer'>1</statistic>
                <statistic aggregation='Max' datatype='integer'>237</statistic>
                <statistic aggregation='Stdev' datatype='real'>63.80880722290788</statistic>
                <statistic aggregation='StdevP' datatype='real'>63.04460232316616</statistic>
                <statistic aggregation='Var' datatype='real'>4071.5638792102209</statistic>
                <statistic aggregation='VarP' datatype='real'>3974.6218820861677</statistic>
                <statistic aggregation='Count' datatype='integer'>42</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>325297.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint16&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_2</remote-name>
              <remote-type>2</remote-type>
              <local-name>[v_2 (foreignbirth)]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_2</remote-alias>
              <ordinal>4</ordinal>
              <family>foreignbirth</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>42</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>64061.0</statistic>
                <statistic aggregation='Avg' datatype='real'>1525.2619047619048</statistic>
                <statistic aggregation='Min' datatype='integer'>36</statistic>
                <statistic aggregation='Max' datatype='integer'>6071</statistic>
                <statistic aggregation='Stdev' datatype='real'>1246.4493387711802</statistic>
                <statistic aggregation='StdevP' datatype='real'>1231.5212632683556</statistic>
                <statistic aggregation='Var' datatype='real'>1553635.9541231126</statistic>
                <statistic aggregation='VarP' datatype='real'>1516644.6218820862</statistic>
                <statistic aggregation='Count' datatype='integer'>42</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>161408877.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>2</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (unique)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint16&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_21</remote-name>
              <remote-type>2</remote-type>
              <local-name>[v_2]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_21</remote-alias>
              <ordinal>5</ordinal>
              <family>stops-restaurants-pop</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>39</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>4629.0</statistic>
                <statistic aggregation='Avg' datatype='real'>110.21428571428571</statistic>
                <statistic aggregation='Min' datatype='integer'>4</statistic>
                <statistic aggregation='Max' datatype='integer'>393</statistic>
                <statistic aggregation='Stdev' datatype='real'>91.390754646425833</statistic>
                <statistic aggregation='StdevP' datatype='real'>90.296215106642393</statistic>
                <statistic aggregation='Var' datatype='real'>8352.2700348432063</statistic>
                <statistic aggregation='VarP' datatype='real'>8153.4064625850342</statistic>
                <statistic aggregation='Count' datatype='integer'>42</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>852625.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint16&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_3</remote-name>
              <remote-type>2</remote-type>
              <local-name>[v_3 (foreignbirth)]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_3</remote-alias>
              <ordinal>6</ordinal>
              <family>foreignbirth</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>42</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>146455.0</statistic>
                <statistic aggregation='Avg' datatype='real'>3487.0238095238096</statistic>
                <statistic aggregation='Min' datatype='integer'>105</statistic>
                <statistic aggregation='Max' datatype='integer'>16784</statistic>
                <statistic aggregation='Stdev' datatype='real'>3568.6174168313369</statistic>
                <statistic aggregation='StdevP' datatype='real'>3525.8779419228154</statistic>
                <statistic aggregation='Var' datatype='real'>12735030.267711964</statistic>
                <statistic aggregation='VarP' datatype='real'>12431815.261337869</statistic>
                <statistic aggregation='Count' datatype='integer'>42</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>1032828313.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>2</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (unique)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint16&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_31</remote-name>
              <remote-type>3</remote-type>
              <local-name>[v_3]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_31</remote-alias>
              <ordinal>7</ordinal>
              <family>stops-restaurants-pop</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>42</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>1083620.0</statistic>
                <statistic aggregation='Avg' datatype='real'>25800.476190476191</statistic>
                <statistic aggregation='Min' datatype='integer'>820</statistic>
                <statistic aggregation='Max' datatype='integer'>68789</statistic>
                <statistic aggregation='Stdev' datatype='real'>16524.170140762977</statistic>
                <statistic aggregation='StdevP' datatype='real'>16326.268748536302</statistic>
                <statistic aggregation='Var' datatype='real'>273048198.84088272</statistic>
                <statistic aggregation='VarP' datatype='real'>266547051.2494331</statistic>
                <statistic aggregation='Count' datatype='integer'>42</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>39152888162.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (unique)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.240351' group-percentage='0.0964912' measure-ordering='alphabetic' measure-percentage='0.498246' parameter-percentage='0.164912' show-aliased-fields='true' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column caption='Minimum Restaurants' datatype='real' name='[Parameter 1]' param-domain-type='range' role='measure' type='quantitative' value='154.42371185592796'>
          <calculation class='tableau' formula='154.42371185592796' />
          <range max='393.0' min='4.0' />
        </column>
      </datasource-dependencies>
    </datasource>
    <datasource caption='Individual Scores' inline='true' name='federated.1suvkt31y0g1z610klyes1t6oi1o' version='10.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='data.world connector' name='webdata-direct.1gwvocl012hcq21ei0c1x1ei1pw7'>
            <connection APIVersion='' authType='none' authentication='no' channel='https' class='webdata-direct' connectionData='{&quot;dataset&quot;:&quot;kvaughn/finalproject&quot;,&quot;apiToken&quot;:&quot;eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJwcm9kLXVzZXItY2xpZW50Omt2YXVnaG4iLCJpc3MiOiJhZ2VudDprdmF1Z2huOjo2ZGQ3N2FjZS1kYjFkLTQ2ZTktODZmZi04MzIzYzQ2MTYyN2UiLCJpYXQiOjE0ODQ2OTcyNzUsInJvbGUiOlsidXNlcl9hcGlfd3JpdGUiLCJ1c2VyX2FwaV9yZWFkIl0sImdlbmVyYWwtcHVycG9zZSI6dHJ1ZX0.FGeVf26qEOhxgRU9idrxcL75Jp84MOak_L0bGoZ33Yi1VFM9_McW7-vEtv3_AbkRH1NPfzWDy2Vn8LHSWGcAZg&quot;}' connectionName='&quot;kvaughn/finalproject&quot;' filename='' increment-key='' path='/' port='443' scriptVersion='' secondary_whitelist='' server='tableau.data.world' urlQuery='' username='' usernameAlias='' />
          </named-connection>
        </named-connections>
        <relation join='inner' type='join'>
          <clause type='join'>
            <expression op='='>
              <expression op='[Restaurant_Inspection_Scores].[v_1]' />
              <expression op='[10K-29KQuery].[v_0]' />
            </expression>
          </clause>
          <relation connection='webdata-direct.1gwvocl012hcq21ei0c1x1ei1pw7' name='Restaurant_Inspection_Scores' table='[RestaurantInspectionScores]' type='table' />
          <relation connection='webdata-direct.1gwvocl012hcq21ei0c1x1ei1pw7' name='10K-29KQuery' table='[10K29KQuery]' type='table' />
        </relation>
        <cols>
          <map key='[v_0 (10K-29KQuery)]' value='[10K-29KQuery].[v_0]' />
          <map key='[v_0]' value='[Restaurant_Inspection_Scores].[v_0]' />
          <map key='[v_1 (10K-29KQuery)]' value='[10K-29KQuery].[v_1]' />
          <map key='[v_1]' value='[Restaurant_Inspection_Scores].[v_1]' />
          <map key='[v_2 (10K-29KQuery)]' value='[10K-29KQuery].[v_2]' />
          <map key='[v_2]' value='[Restaurant_Inspection_Scores].[v_2]' />
          <map key='[v_3 (10K-29KQuery)]' value='[10K-29KQuery].[v_3]' />
          <map key='[v_3]' value='[Restaurant_Inspection_Scores].[v_3]' />
          <map key='[v_4 (10K-29KQuery)]' value='[10K-29KQuery].[v_4]' />
          <map key='[v_4]' value='[Restaurant_Inspection_Scores].[v_4]' />
          <map key='[v_5 (10K-29KQuery)]' value='[10K-29KQuery].[v_5]' />
          <map key='[v_5]' value='[Restaurant_Inspection_Scores].[v_5]' />
          <map key='[v_6 (10K-29KQuery)]' value='[10K-29KQuery].[v_6]' />
          <map key='[v_6]' value='[Restaurant_Inspection_Scores].[v_6]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>v_0</remote-name>
            <remote-type>2</remote-type>
            <local-name>[v_0]</local-name>
            <parent-name>[Restaurant_Inspection_Scores]</parent-name>
            <remote-alias>Restaurant Name</remote-alias>
            <ordinal>0</ordinal>
            <caption>Restaurant Name</caption>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;string&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_1</remote-name>
            <remote-type>0</remote-type>
            <local-name>[v_1]</local-name>
            <parent-name>[Restaurant_Inspection_Scores]</parent-name>
            <remote-alias>Zip Code</remote-alias>
            <ordinal>1</ordinal>
            <caption>Zip Code</caption>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;int&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_2</remote-name>
            <remote-type>5</remote-type>
            <local-name>[v_2]</local-name>
            <parent-name>[Restaurant_Inspection_Scores]</parent-name>
            <remote-alias>Inspection Date</remote-alias>
            <ordinal>2</ordinal>
            <caption>Inspection Date</caption>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;date&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_3</remote-name>
            <remote-type>0</remote-type>
            <local-name>[v_3]</local-name>
            <parent-name>[Restaurant_Inspection_Scores]</parent-name>
            <remote-alias>Score</remote-alias>
            <ordinal>3</ordinal>
            <caption>Score</caption>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;int&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_4</remote-name>
            <remote-type>2</remote-type>
            <local-name>[v_4]</local-name>
            <parent-name>[Restaurant_Inspection_Scores]</parent-name>
            <remote-alias>Address</remote-alias>
            <ordinal>4</ordinal>
            <caption>Address</caption>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;string&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_5</remote-name>
            <remote-type>0</remote-type>
            <local-name>[v_5]</local-name>
            <parent-name>[Restaurant_Inspection_Scores]</parent-name>
            <remote-alias>Facility ID</remote-alias>
            <ordinal>5</ordinal>
            <caption>Facility ID</caption>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;int&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_6</remote-name>
            <remote-type>2</remote-type>
            <local-name>[v_6]</local-name>
            <parent-name>[Restaurant_Inspection_Scores]</parent-name>
            <remote-alias>Process Description</remote-alias>
            <ordinal>6</ordinal>
            <caption>Process Description</caption>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;string&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_0</remote-name>
            <remote-type>0</remote-type>
            <local-name>[v_0 (10K-29KQuery)]</local-name>
            <parent-name>[10K-29KQuery]</parent-name>
            <remote-alias>ZCTA</remote-alias>
            <ordinal>7</ordinal>
            <caption>ZCTA</caption>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;int&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_1</remote-name>
            <remote-type>0</remote-type>
            <local-name>[v_1 (10K-29KQuery)]</local-name>
            <parent-name>[10K-29KQuery]</parent-name>
            <remote-alias>Household Income</remote-alias>
            <ordinal>8</ordinal>
            <caption>Household Income</caption>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;int&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_2</remote-name>
            <remote-type>0</remote-type>
            <local-name>[v_2 (10K-29KQuery)]</local-name>
            <parent-name>[10K-29KQuery]</parent-name>
            <remote-alias>Less than 10,000</remote-alias>
            <ordinal>9</ordinal>
            <caption>Less than 10,000</caption>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;int&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_3</remote-name>
            <remote-type>0</remote-type>
            <local-name>[v_3 (10K-29KQuery)]</local-name>
            <parent-name>[10K-29KQuery]</parent-name>
            <remote-alias>10,000 to 14,999</remote-alias>
            <ordinal>10</ordinal>
            <caption>10,000 to 14,999</caption>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;int&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_4</remote-name>
            <remote-type>0</remote-type>
            <local-name>[v_4 (10K-29KQuery)]</local-name>
            <parent-name>[10K-29KQuery]</parent-name>
            <remote-alias>15,000 to 19,999</remote-alias>
            <ordinal>11</ordinal>
            <caption>15,000 to 19,999</caption>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;int&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_5</remote-name>
            <remote-type>0</remote-type>
            <local-name>[v_5 (10K-29KQuery)]</local-name>
            <parent-name>[10K-29KQuery]</parent-name>
            <remote-alias>20,000 to 24,999</remote-alias>
            <ordinal>12</ordinal>
            <caption>20,000 to 24,999</caption>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;int&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>v_6</remote-name>
            <remote-type>0</remote-type>
            <local-name>[v_6 (10K-29KQuery)]</local-name>
            <parent-name>[10K-29KQuery]</parent-name>
            <remote-alias>25,000 to 29,999</remote-alias>
            <ordinal>13</ordinal>
            <caption>25,000 to 29,999</caption>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='RemoteTypeName'>&quot;int&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Number of restaurants' datatype='integer' name='[Calculation_107523509346086912]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='countd([v_5])' />
      </column>
      <column caption='Safety Index' datatype='real' name='[Calculation_107523509364416513]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='avg([v_3]) / (100 - min([v_3]))' />
      </column>
      <column caption='KPI: Safety Index' datatype='string' name='[Calculation_107523509364682754]' role='measure' type='nominal'>
        <calculation class='tableau' formula='IF avg([v_3]) / (100 - min([v_3])) &lt;= [Parameters].[Parameter 2]&#10;THEN &quot;03 Low&quot;&#10;ELSEIF avg([v_3]) / (100 - min([v_3])) &lt;= [Parameters].[Parameter 3]&#10;THEN &quot;02 Medium&quot;&#10;ELSE &quot;01 High&quot;&#10;END' />
      </column>
      <column caption='Percentage households below poverty' datatype='real' name='[Calculation_107523509384433667]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='100*((avg([v_3 (10K-29KQuery)]) + avg([v_4 (10K-29KQuery)]))&#10;/avg([v_1 (10K-29KQuery)]))' />
      </column>
      <column caption='Difference from Yearly Average' datatype='real' name='[Calculation_107523509386072068]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='avg([v_3]) - &#10;TOTAL(sum([v_3])/sum([Number of Records]))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='ZCTA' datatype='integer' name='[v_0 (10K-29KQuery)]' role='measure' type='quantitative' />
      <column caption='Restaurant Name' datatype='string' name='[v_0]' role='dimension' type='nominal' />
      <column caption='Household Income' datatype='integer' name='[v_1 (10K-29KQuery)]' role='measure' type='quantitative' />
      <column caption='Zip Code' datatype='integer' default-format='*00000' name='[v_1]' role='dimension' semantic-role='[ZipCode].[Name]' type='ordinal' />
      <column caption='Less than 10,000' datatype='integer' name='[v_2 (10K-29KQuery)]' role='measure' type='quantitative' />
      <column caption='Inspection Date' datatype='date' name='[v_2]' role='dimension' type='ordinal' />
      <column caption='10,000 to 14,999' datatype='integer' name='[v_3 (10K-29KQuery)]' role='measure' type='quantitative' />
      <column caption='Score' datatype='integer' name='[v_3]' role='measure' type='quantitative' />
      <column caption='15,000 to 19,999' datatype='integer' name='[v_4 (10K-29KQuery)]' role='measure' type='quantitative' />
      <column caption='Address' datatype='string' name='[v_4]' role='dimension' type='nominal' />
      <column caption='20,000 to 24,999' datatype='integer' name='[v_5 (10K-29KQuery)]' role='measure' type='quantitative' />
      <column caption='Facility ID' datatype='integer' name='[v_5]' role='measure' type='quantitative' />
      <column caption='25,000 to 29,999' datatype='integer' name='[v_6 (10K-29KQuery)]' role='measure' type='quantitative' />
      <column caption='Process Description' datatype='string' name='[v_6]' role='dimension' type='nominal' />
      <column-instance column='[WestVsEast]' derivation='InOut' name='[io:WestVsEast:nk]' pivot='key' type='nominal'>
        <aliases>
          <alias key='false' value='Eastern' />
          <alias key='true' value='Western' />
        </aliases>
      </column-instance>
      <column-instance column='[v_2]' derivation='Year' name='[yr:v_2:ok]' pivot='key' type='ordinal' />
      <group name='[WestVsEast]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter function='crossjoin'>
            <groupfilter function='union'>
              <groupfilter function='member' level='[yr:v_2:ok]' member='2014' />
              <groupfilter function='member' level='[yr:v_2:ok]' member='2015' />
              <groupfilter function='member' level='[yr:v_2:ok]' member='2016' />
            </groupfilter>
            <groupfilter function='union'>
              <groupfilter function='member' level='[v_1]' member='78613' />
              <groupfilter function='member' level='[v_1]' member='78620' />
              <groupfilter function='member' level='[v_1]' member='78641' />
              <groupfilter function='member' level='[v_1]' member='78652' />
              <groupfilter function='member' level='[v_1]' member='78654' />
              <groupfilter function='member' level='[v_1]' member='78669' />
              <groupfilter function='member' level='[v_1]' member='78726' />
              <groupfilter function='member' level='[v_1]' member='78730' />
              <groupfilter function='member' level='[v_1]' member='78732' />
              <groupfilter function='member' level='[v_1]' member='78733' />
              <groupfilter function='member' level='[v_1]' member='78734' />
              <groupfilter function='member' level='[v_1]' member='78735' />
              <groupfilter function='member' level='[v_1]' member='78736' />
              <groupfilter function='member' level='[v_1]' member='78737' />
              <groupfilter function='member' level='[v_1]' member='78738' />
              <groupfilter function='member' level='[v_1]' member='78739' />
              <groupfilter function='member' level='[v_1]' member='78746' />
              <groupfilter function='member' level='[v_1]' member='78748' />
              <groupfilter function='member' level='[v_1]' member='78749' />
            </groupfilter>
          </groupfilter>
          <groupfilter function='crossjoin'>
            <groupfilter function='member' level='[yr:v_2:ok]' member='2017' />
            <groupfilter function='union'>
              <groupfilter function='member' level='[v_1]' member='78613' />
              <groupfilter function='member' level='[v_1]' member='78620' />
              <groupfilter function='member' level='[v_1]' member='78641' />
              <groupfilter function='member' level='[v_1]' member='78652' />
              <groupfilter function='member' level='[v_1]' member='78669' />
              <groupfilter function='member' level='[v_1]' member='78726' />
              <groupfilter function='member' level='[v_1]' member='78730' />
              <groupfilter function='member' level='[v_1]' member='78732' />
              <groupfilter function='member' level='[v_1]' member='78733' />
              <groupfilter function='member' level='[v_1]' member='78734' />
              <groupfilter function='member' level='[v_1]' member='78735' />
              <groupfilter function='member' level='[v_1]' member='78736' />
              <groupfilter function='member' level='[v_1]' member='78737' />
              <groupfilter function='member' level='[v_1]' member='78738' />
              <groupfilter function='member' level='[v_1]' member='78739' />
              <groupfilter function='member' level='[v_1]' member='78746' />
              <groupfilter function='member' level='[v_1]' member='78748' />
              <groupfilter function='member' level='[v_1]' member='78749' />
            </groupfilter>
          </groupfilter>
        </groupfilter>
      </group>
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='/Users/kate/CSVs/Datasources/federated.1suvkt31y0g1z610klyes1t6oi1o_01on7md0ofztgh14rddyw0nbwsmk.tde' schema='Extract' tablename='Extract' update-time='04/26/2017 08:05:37 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <cols>
            <map key='[v_0 (10K-29KQuery)]' value='[Extract].[v_0]' />
            <map key='[v_0]' value='[Extract].[v_01]' />
            <map key='[v_1 (10K-29KQuery)]' value='[Extract].[v_1]' />
            <map key='[v_1]' value='[Extract].[v_11]' />
            <map key='[v_2 (10K-29KQuery)]' value='[Extract].[v_2]' />
            <map key='[v_2]' value='[Extract].[v_21]' />
            <map key='[v_3 (10K-29KQuery)]' value='[Extract].[v_3]' />
            <map key='[v_3]' value='[Extract].[v_31]' />
            <map key='[v_4 (10K-29KQuery)]' value='[Extract].[v_4]' />
            <map key='[v_4]' value='[Extract].[v_41]' />
            <map key='[v_5 (10K-29KQuery)]' value='[Extract].[v_5]' />
            <map key='[v_5]' value='[Extract].[v_51]' />
            <map key='[v_6 (10K-29KQuery)]' value='[Extract].[v_6]' />
            <map key='[v_6]' value='[Extract].[v_61]' />
          </cols>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='25072' timestamp-start='2017-04-26 20:05:37.974' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>v_0</remote-name>
              <remote-type>3</remote-type>
              <local-name>[v_0 (10K-29KQuery)]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_0</remote-alias>
              <ordinal>0</ordinal>
              <family>10K-29KQuery</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>53</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>78613</statistic>
                <statistic aggregation='Max' datatype='integer'>78759</statistic>
                <statistic aggregation='Count' datatype='integer'>25072</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>9</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_01</remote-name>
              <remote-type>129</remote-type>
              <local-name>[v_0]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_01</remote-alias>
              <ordinal>1</ordinal>
              <family>Restaurant_Inspection_Scores</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>4462</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LROOT' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;1-Stop Food Store&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;ZuZu Restaurant&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>25072</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;root&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>4</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>4</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_1</remote-name>
              <remote-type>2</remote-type>
              <local-name>[v_1 (10K-29KQuery)]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_1</remote-alias>
              <ordinal>2</ordinal>
              <family>10K-29KQuery</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>52</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>273</statistic>
                <statistic aggregation='Max' datatype='integer'>26362</statistic>
                <statistic aggregation='Count' datatype='integer'>25072</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>2</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>7</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint16&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_11</remote-name>
              <remote-type>3</remote-type>
              <local-name>[v_1]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_11</remote-alias>
              <ordinal>3</ordinal>
              <family>Restaurant_Inspection_Scores</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>53</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>78613</statistic>
                <statistic aggregation='Max' datatype='integer'>78759</statistic>
                <statistic aggregation='Count' datatype='integer'>25072</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_2</remote-name>
              <remote-type>2</remote-type>
              <local-name>[v_2 (10K-29KQuery)]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_2</remote-alias>
              <ordinal>4</ordinal>
              <family>10K-29KQuery</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>53</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>18</statistic>
                <statistic aggregation='Max' datatype='integer'>3669</statistic>
                <statistic aggregation='Count' datatype='integer'>25072</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>2</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>10</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint16&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_21</remote-name>
              <remote-type>133</remote-type>
              <local-name>[v_2]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_21</remote-alias>
              <ordinal>5</ordinal>
              <family>Restaurant_Inspection_Scores</family>
              <local-type>date</local-type>
              <aggregation>Year</aggregation>
              <approx-count>776</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='date'>#2014-03-31#</statistic>
                <statistic aggregation='Max' datatype='date'>#2017-03-10#</statistic>
                <statistic aggregation='Count' datatype='integer'>25072</statistic>
                <statistic aggregation='Median' datatype='date'>#2015-10-12#</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>0</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;date&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_3</remote-name>
              <remote-type>2</remote-type>
              <local-name>[v_3 (10K-29KQuery)]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_3</remote-alias>
              <ordinal>6</ordinal>
              <family>10K-29KQuery</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>53</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>0</statistic>
                <statistic aggregation='Max' datatype='integer'>1755</statistic>
                <statistic aggregation='Count' datatype='integer'>25072</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>2</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>11</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint16&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_31</remote-name>
              <remote-type>16</remote-type>
              <local-name>[v_3]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_31</remote-alias>
              <ordinal>7</ordinal>
              <family>Restaurant_Inspection_Scores</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>53</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>36</statistic>
                <statistic aggregation='Max' datatype='integer'>100</statistic>
                <statistic aggregation='Count' datatype='integer'>25072</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>12</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint8&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_4</remote-name>
              <remote-type>2</remote-type>
              <local-name>[v_4 (10K-29KQuery)]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_4</remote-alias>
              <ordinal>8</ordinal>
              <family>10K-29KQuery</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>51</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>0</statistic>
                <statistic aggregation='Max' datatype='integer'>1846</statistic>
                <statistic aggregation='Count' datatype='integer'>25072</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>2</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>6</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint16&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_41</remote-name>
              <remote-type>129</remote-type>
              <local-name>[v_4]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_41</remote-alias>
              <ordinal>9</ordinal>
              <family>Restaurant_Inspection_Scores</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>4185</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LROOT' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;1 WORLD OF TENNIS SQ LAKEWAY, TX 78738 (30.351955, -97.997553)&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;P.O.BOX 19454 AUSTIN, TX 78741 &quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>25072</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;root&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>3</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>4</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_5</remote-name>
              <remote-type>2</remote-type>
              <local-name>[v_5 (10K-29KQuery)]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_5</remote-alias>
              <ordinal>10</ordinal>
              <family>10K-29KQuery</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>52</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>10</statistic>
                <statistic aggregation='Max' datatype='integer'>1764</statistic>
                <statistic aggregation='Count' datatype='integer'>25072</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>2</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>8</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint16&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_51</remote-name>
              <remote-type>3</remote-type>
              <local-name>[v_5]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_51</remote-alias>
              <ordinal>11</ordinal>
              <family>Restaurant_Inspection_Scores</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>4951</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>189709018663.0</statistic>
                <statistic aggregation='Avg' datatype='real'>7566569.0277201664</statistic>
                <statistic aggregation='Min' datatype='integer'>2800004</statistic>
                <statistic aggregation='Max' datatype='integer'>11595421</statistic>
                <statistic aggregation='Stdev' datatype='real'>3867074.5049876021</statistic>
                <statistic aggregation='StdevP' datatype='real'>3866997.3848323403</statistic>
                <statistic aggregation='Var' datatype='real'>14954265227125.109</statistic>
                <statistic aggregation='VarP' datatype='real'>14953668774300.16</statistic>
                <statistic aggregation='Count' datatype='integer'>25072</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>1.8103647684038963e+18</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>13</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_6</remote-name>
              <remote-type>2</remote-type>
              <local-name>[v_6 (10K-29KQuery)]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_6</remote-alias>
              <ordinal>12</ordinal>
              <family>10K-29KQuery</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>50</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>20</statistic>
                <statistic aggregation='Max' datatype='integer'>1312</statistic>
                <statistic aggregation='Count' datatype='integer'>25072</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>2</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>5</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint16&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>v_61</remote-name>
              <remote-type>129</remote-type>
              <local-name>[v_6]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>v_61</remote-alias>
              <ordinal>13</ordinal>
              <family>Restaurant_Inspection_Scores</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>4</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LROOT' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;1st Follow Up to Routine of 49 or less&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;Routine Inspection&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>25072</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;root&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.221053' group-percentage='0.0403509' measure-ordering='alphabetic' measure-percentage='0.62807' parameter-percentage='0.110526' show-aliased-fields='true' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column caption='Safety Index: Low' datatype='real' name='[Parameter 2]' param-domain-type='range' role='measure' type='quantitative' value='3.0'>
          <calculation class='tableau' formula='3.0' />
          <range max='5.0' min='1.0' />
        </column>
        <column caption='Safety Index: Medium' datatype='real' name='[Parameter 3]' param-domain-type='range' role='measure' type='quantitative' value='8.0'>
          <calculation class='tableau' formula='8.0' />
          <range max='10.0' min='5.0' />
        </column>
      </datasource-dependencies>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <actions>
    <action caption='Select Year from Crosstab' name='[Action1]'>
      <activation auto-clear='true' />
      <source datasource='federated.1suvkt31y0g1z610klyes1t6oi1o' type='datasource'>
        <exclude-sheet name='Map, Scores by Zip per Year' />
      </source>
      <link caption='Select Year from Crosstab' delimiter=',' escape='\' expression='tsl:Map%2C%20Scores%20by%20Zip%20per%20Year?%5Bfederated.1suvkt31y0g1z610klyes1t6oi1o%5D.%5Byr%3Av_2%3Aok%5D~s0=&lt;YEAR([v_2])~na&gt;' include-null='true' multi-select='true' url-escape='true' />
      <command command='tsc:tsl-filter'>
        <param name='target' value='Map, Scores by Zip per Year' />
      </command>
    </action>
    <action caption='Highlight1' name='[Action2]'>
      <activation auto-clear='true' type='on-select' />
      <source type='sheet' worksheet='Scores by Year' />
      <command command='tsc:brush'>
        <param name='field-captions' value='Zip Code' />
        <param name='target' value='Map, Scores by Zip per Year' />
      </command>
    </action>
    <action caption='HighlightZip2' name='[Action3]'>
      <activation auto-clear='true' type='on-select' />
      <source type='sheet' worksheet='Average Inspection Scores as They Relate to Area and Income' />
      <command command='tsc:brush'>
        <param name='field-captions' value='YEAR(Inspection Date),Zip Code' />
        <param name='target' value='Map, Scores by Zip per Year' />
      </command>
    </action>
    <datasources>
      <datasource caption='Individual Scores' name='federated.1suvkt31y0g1z610klyes1t6oi1o' />
    </datasources>
    <datasource-dependencies datasource='federated.1suvkt31y0g1z610klyes1t6oi1o'>
      <column caption='Inspection Date' datatype='date' name='[v_2]' role='dimension' type='ordinal' />
      <column-instance column='[v_2]' derivation='Year' name='[yr:v_2:ok]' pivot='key' type='ordinal' />
    </datasource-dependencies>
  </actions>
  <worksheets>
    <worksheet name='Average Inspection Scores as They Relate to Area and Income'>
      <table>
        <view>
          <datasources>
            <datasource caption='Individual Scores' name='federated.1suvkt31y0g1z610klyes1t6oi1o' />
          </datasources>
          <datasource-dependencies datasource='federated.1suvkt31y0g1z610klyes1t6oi1o'>
            <column caption='Percentage households below poverty' datatype='real' name='[Calculation_107523509384433667]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='100*((avg([v_3 (10K-29KQuery)]) + avg([v_4 (10K-29KQuery)]))&#10;/avg([v_1 (10K-29KQuery)]))' />
            </column>
            <column-instance column='[v_3]' derivation='Avg' name='[avg:v_3:qk]' pivot='key' type='quantitative' />
            <column-instance column='[WestVsEast]' derivation='InOut' name='[io:WestVsEast:nk]' pivot='key' type='nominal'>
              <aliases>
                <alias key='false' value='Eastern' />
                <alias key='true' value='Western' />
              </aliases>
            </column-instance>
            <column-instance column='[v_1]' derivation='None' name='[none:v_1:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Calculation_107523509384433667]' derivation='User' name='[usr:Calculation_107523509384433667:qk]' pivot='key' type='quantitative' />
            <column caption='Household Income' datatype='integer' name='[v_1 (10K-29KQuery)]' role='measure' type='quantitative' />
            <column caption='Zip Code' datatype='integer' default-format='*00000' name='[v_1]' role='dimension' semantic-role='[ZipCode].[Name]' type='ordinal' />
            <column caption='Inspection Date' datatype='date' name='[v_2]' role='dimension' type='ordinal' />
            <column caption='10,000 to 14,999' datatype='integer' name='[v_3 (10K-29KQuery)]' role='measure' type='quantitative' />
            <column caption='Score' datatype='integer' name='[v_3]' role='measure' type='quantitative' />
            <column caption='15,000 to 19,999' datatype='integer' name='[v_4 (10K-29KQuery)]' role='measure' type='quantitative' />
            <column-instance column='[v_2]' derivation='Year' name='[yr:v_2:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1suvkt31y0g1z610klyes1t6oi1o].[none:v_1:ok]'>
            <groupfilter from='78613' function='range' level='[none:v_1:ok]' to='78759' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1suvkt31y0g1z610klyes1t6oi1o].[none:v_1:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.1suvkt31y0g1z610klyes1t6oi1o].[usr:Calculation_107523509384433667:qk]' palette='sunrise_sunset_diverging_10_0' type='interpolated' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1suvkt31y0g1z610klyes1t6oi1o].[usr:Calculation_107523509384433667:qk]' />
              <text column='[federated.1suvkt31y0g1z610klyes1t6oi1o].[avg:v_3:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1suvkt31y0g1z610klyes1t6oi1o].[none:v_1:ok]</rows>
        <cols>[federated.1suvkt31y0g1z610klyes1t6oi1o].[yr:v_2:ok]</cols>
        <pages>
          <column>[federated.1suvkt31y0g1z610klyes1t6oi1o].[io:WestVsEast:nk]</column>
        </pages>
      </table>
    </worksheet>
    <worksheet name='CapMetro Stops by Zipcode as they Relate to Restaurant Density'>
      <table>
        <view>
          <datasources>
            <datasource caption='Aggregates by zip' name='federated.1nvb9cy1tthgcj1fqoo5e1a8eobq' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Minimum Restaurants' datatype='real' name='[Parameter 1]' param-domain-type='range' role='measure' type='quantitative' value='154.42371185592796'>
              <calculation class='tableau' formula='154.42371185592796' />
              <range max='393.0' min='4.0' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.1nvb9cy1tthgcj1fqoo5e1a8eobq'>
            <column caption='Floor' datatype='string' name='[Calculation_879046420456546304]' role='measure' type='nominal'>
              <calculation class='tableau' formula='if sum([v_2]) &lt; [Parameters].[Parameter 1] then &quot;02 Below Minimum&quot;&#10;else &quot;01 Above Minimum&quot;&#10;end' />
            </column>
            <column-instance column='[v_0]' derivation='None' name='[none:v_0:ok]' pivot='key' type='ordinal' />
            <column-instance column='[v_1]' derivation='Sum' name='[sum:v_1:qk]' pivot='key' type='quantitative' />
            <column-instance column='[v_2]' derivation='Sum' name='[sum:v_2:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_879046420456546304]' derivation='User' name='[usr:Calculation_879046420456546304:nk]' pivot='key' type='nominal' />
            <column aggregation='Sum' caption='Zip Code' datatype='integer' name='[v_0]' role='dimension' type='ordinal' />
            <column caption='stops' datatype='integer' name='[v_1]' role='measure' type='quantitative' />
            <column caption='restaurants' datatype='integer' name='[v_2]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1nvb9cy1tthgcj1fqoo5e1a8eobq].[usr:Calculation_879046420456546304:nk]'>
            <groupfilter function='level-members' level='[usr:Calculation_879046420456546304:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1nvb9cy1tthgcj1fqoo5e1a8eobq].[usr:Calculation_879046420456546304:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.1nvb9cy1tthgcj1fqoo5e1a8eobq].[sum:v_1:qk]' scope='cols' value='CapMetro Bus Stops' />
            <format attr='subtitle' class='0' field='[federated.1nvb9cy1tthgcj1fqoo5e1a8eobq].[sum:v_1:qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[federated.1nvb9cy1tthgcj1fqoo5e1a8eobq].[sum:v_1:qk]' scope='cols' value='true' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1nvb9cy1tthgcj1fqoo5e1a8eobq].[sum:v_2:qk]' />
            </encodings>
            <reference-line axis-column='[federated.1nvb9cy1tthgcj1fqoo5e1a8eobq].[sum:v_1:qk]' enable-instant-analytics='true' formula='average' id='refline0' label-type='automatic' probability='95' scope='per-table' value-column='[federated.1nvb9cy1tthgcj1fqoo5e1a8eobq].[sum:v_1:qk]' z-order='1' />
          </pane>
        </panes>
        <rows>[federated.1nvb9cy1tthgcj1fqoo5e1a8eobq].[none:v_0:ok]</rows>
        <cols>[federated.1nvb9cy1tthgcj1fqoo5e1a8eobq].[sum:v_1:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Foreign Population vs. Restaurant Density'>
      <table>
        <view>
          <datasources>
            <datasource caption='Aggregates by zip' name='federated.1nvb9cy1tthgcj1fqoo5e1a8eobq' />
          </datasources>
          <datasource-dependencies datasource='federated.1nvb9cy1tthgcj1fqoo5e1a8eobq'>
            <column-instance column='[LargerThanAverage]' derivation='InOut' name='[io:LargerThanAverage:nk]' pivot='key' type='nominal'>
              <aliases>
                <alias key='false' value='At or Below Average Foreign Population' />
                <alias key='true' value='Higher Than Average Foreign Population' />
              </aliases>
            </column-instance>
            <column-instance column='[v_0 (foreignbirth)]' derivation='None' name='[none:v_0 (foreignbirth):ok]' pivot='key' type='ordinal' />
            <column-instance column='[v_2]' derivation='Sum' name='[sum:v_2:qk]' pivot='key' type='quantitative' />
            <column-instance column='[v_3 (foreignbirth)]' derivation='Sum' name='[sum:v_3 (foreignbirth):qk]' pivot='key' type='quantitative' />
            <column aggregation='Sum' caption='Zip Code' datatype='integer' name='[v_0 (foreignbirth)]' role='dimension' type='ordinal' />
            <column caption='restaurants' datatype='integer' name='[v_2]' role='measure' type='quantitative' />
            <column caption='Noncitizens' datatype='integer' name='[v_3 (foreignbirth)]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.1nvb9cy1tthgcj1fqoo5e1a8eobq].[sum:v_2:qk]' palette='green_10_0' type='interpolated' />
          </style-rule>
        </style>
        <panes>
          <pane id='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1nvb9cy1tthgcj1fqoo5e1a8eobq].[sum:v_2:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1nvb9cy1tthgcj1fqoo5e1a8eobq].[none:v_0 (foreignbirth):ok]</rows>
        <cols>[federated.1nvb9cy1tthgcj1fqoo5e1a8eobq].[sum:v_3 (foreignbirth):qk]</cols>
        <pages>
          <column>[federated.1nvb9cy1tthgcj1fqoo5e1a8eobq].[io:LargerThanAverage:nk]</column>
        </pages>
      </table>
    </worksheet>
    <worksheet name='Map, Scores by Zip per Year'>
      <table>
        <view>
          <datasources>
            <datasource caption='Individual Scores' name='federated.1suvkt31y0g1z610klyes1t6oi1o' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1suvkt31y0g1z610klyes1t6oi1o'>
            <column caption='Difference from Yearly Average' datatype='real' name='[Calculation_107523509386072068]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='avg([v_3]) - &#10;TOTAL(sum([v_3])/sum([Number of Records]))'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column-instance column='[v_3]' derivation='Avg' name='[avg:v_3:qk]' pivot='key' type='quantitative' />
            <column-instance column='[v_1]' derivation='None' name='[none:v_1:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Calculation_107523509386072068]' derivation='User' name='[usr:Calculation_107523509386072068:qk:2]' pivot='key' type='quantitative'>
              <table-calc ordering-field='[federated.1suvkt31y0g1z610klyes1t6oi1o].[v_1]' ordering-type='Field' />
            </column-instance>
            <column caption='Zip Code' datatype='integer' default-format='*00000' name='[v_1]' role='dimension' semantic-role='[ZipCode].[Name]' type='ordinal' />
            <column caption='Inspection Date' datatype='date' name='[v_2]' role='dimension' type='ordinal' />
            <column caption='Score' datatype='integer' name='[v_3]' role='measure' type='quantitative' />
            <column-instance column='[v_2]' derivation='Year' name='[yr:v_2:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1suvkt31y0g1z610klyes1t6oi1o].[yr:v_2:ok]'>
            <groupfilter from='2014' function='range' level='[yr:v_2:ok]' to='2017' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1suvkt31y0g1z610klyes1t6oi1o].[yr:v_2:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.1suvkt31y0g1z610klyes1t6oi1o].[avg:v_3:qk]' />
              <color column='[federated.1suvkt31y0g1z610klyes1t6oi1o].[usr:Calculation_107523509386072068:qk:2]' />
              <lod column='[federated.1suvkt31y0g1z610klyes1t6oi1o].[yr:v_2:ok]' />
              <lod column='[federated.1suvkt31y0g1z610klyes1t6oi1o].[none:v_1:ok]' />
              <geometry column='[federated.1suvkt31y0g1z610klyes1t6oi1o].[Geometry (generated)]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1suvkt31y0g1z610klyes1t6oi1o].[Latitude (generated)]</rows>
        <cols>[federated.1suvkt31y0g1z610klyes1t6oi1o].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Scores by Year'>
      <table>
        <view>
          <datasources>
            <datasource caption='Individual Scores' name='federated.1suvkt31y0g1z610klyes1t6oi1o' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Safety Index: Low' datatype='real' name='[Parameter 2]' param-domain-type='range' role='measure' type='quantitative' value='3.0'>
              <calculation class='tableau' formula='3.0' />
              <range max='5.0' min='1.0' />
            </column>
            <column caption='Safety Index: Medium' datatype='real' name='[Parameter 3]' param-domain-type='range' role='measure' type='quantitative' value='8.0'>
              <calculation class='tableau' formula='8.0' />
              <range max='10.0' min='5.0' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.1suvkt31y0g1z610klyes1t6oi1o'>
            <column caption='Number of restaurants' datatype='integer' name='[Calculation_107523509346086912]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='countd([v_5])' />
            </column>
            <column caption='KPI: Safety Index' datatype='string' name='[Calculation_107523509364682754]' role='measure' type='nominal'>
              <calculation class='tableau' formula='IF avg([v_3]) / (100 - min([v_3])) &lt;= [Parameters].[Parameter 2]&#10;THEN &quot;03 Low&quot;&#10;ELSEIF avg([v_3]) / (100 - min([v_3])) &lt;= [Parameters].[Parameter 3]&#10;THEN &quot;02 Medium&quot;&#10;ELSE &quot;01 High&quot;&#10;END' />
            </column>
            <column-instance column='[v_3]' derivation='Avg' name='[avg:v_3:qk]' pivot='key' type='quantitative' />
            <column-instance column='[v_3]' derivation='Min' name='[min:v_3:qk]' pivot='key' type='quantitative' />
            <column-instance column='[v_1]' derivation='None' name='[none:v_1:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Calculation_107523509346086912]' derivation='User' name='[usr:Calculation_107523509346086912:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_107523509364682754]' derivation='User' name='[usr:Calculation_107523509364682754:nk]' pivot='key' type='nominal' />
            <column caption='Zip Code' datatype='integer' default-format='*00000' name='[v_1]' role='dimension' semantic-role='[ZipCode].[Name]' type='ordinal' />
            <column caption='Inspection Date' datatype='date' name='[v_2]' role='dimension' type='ordinal' />
            <column caption='Score' datatype='integer' name='[v_3]' role='measure' type='quantitative' />
            <column caption='Facility ID' datatype='integer' name='[v_5]' role='measure' type='quantitative' />
            <column-instance column='[v_2]' derivation='Year' name='[yr:v_2:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1suvkt31y0g1z610klyes1t6oi1o].[none:v_1:ok]'>
            <groupfilter from='78613' function='range' level='[none:v_1:ok]' to='78759' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1suvkt31y0g1z610klyes1t6oi1o].[usr:Calculation_107523509364682754:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[usr:Calculation_107523509364682754:nk]' member='&quot;01 High&quot;' />
              <groupfilter function='member' level='[usr:Calculation_107523509364682754:nk]' member='&quot;02 Medium&quot;' />
              <groupfilter function='member' level='[usr:Calculation_107523509364682754:nk]' member='&quot;03 Low&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1suvkt31y0g1z610klyes1t6oi1o].[none:v_1:ok]</column>
            <column>[federated.1suvkt31y0g1z610klyes1t6oi1o].[usr:Calculation_107523509364682754:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1suvkt31y0g1z610klyes1t6oi1o].[usr:Calculation_107523509364682754:nk]' />
              <text column='[federated.1suvkt31y0g1z610klyes1t6oi1o].[avg:v_3:qk]' />
              <text column='[federated.1suvkt31y0g1z610klyes1t6oi1o].[min:v_3:qk]' />
              <text column='[federated.1suvkt31y0g1z610klyes1t6oi1o].[usr:Calculation_107523509346086912:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1suvkt31y0g1z610klyes1t6oi1o].[none:v_1:ok]</rows>
        <cols>[federated.1suvkt31y0g1z610klyes1t6oi1o].[yr:v_2:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='Stop to Restuarant Ratios per Zipcode by Nativity'>
      <table>
        <view>
          <datasources>
            <datasource caption='Aggregates by zip' name='federated.1nvb9cy1tthgcj1fqoo5e1a8eobq' />
          </datasources>
          <datasource-dependencies datasource='federated.1nvb9cy1tthgcj1fqoo5e1a8eobq'>
            <column caption='Stop/Restaurant Ratio' datatype='real' name='[Calculation_60165344307113984]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([v_1])/SUM([v_2])' />
            </column>
            <column-instance column='[v_0 (foreignbirth)]' derivation='None' name='[none:v_0 (foreignbirth):ok]' pivot='key' type='ordinal' />
            <column-instance column='[v_1 (foreignbirth)]' derivation='Sum' name='[sum:v_1 (foreignbirth):qk]' pivot='key' type='quantitative' />
            <column-instance column='[v_2 (foreignbirth)]' derivation='Sum' name='[sum:v_2 (foreignbirth):qk]' pivot='key' type='quantitative' />
            <column-instance column='[v_3 (foreignbirth)]' derivation='Sum' name='[sum:v_3 (foreignbirth):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_60165344307113984]' derivation='User' name='[usr:Calculation_60165344307113984:qk]' pivot='key' type='quantitative' />
            <column aggregation='Sum' caption='Zip Code' datatype='integer' name='[v_0 (foreignbirth)]' role='dimension' type='ordinal' />
            <column caption='Native' datatype='integer' name='[v_1 (foreignbirth)]' role='measure' type='quantitative' />
            <column caption='stops' datatype='integer' name='[v_1]' role='measure' type='quantitative' />
            <column caption='Naturalized' datatype='integer' name='[v_2 (foreignbirth)]' role='measure' type='quantitative' />
            <column caption='restaurants' datatype='integer' name='[v_2]' role='measure' type='quantitative' />
            <column caption='Noncitizens' datatype='integer' name='[v_3 (foreignbirth)]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.1nvb9cy1tthgcj1fqoo5e1a8eobq].[usr:Calculation_60165344307113984:qk]' palette='purple_10_0' type='interpolated' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1nvb9cy1tthgcj1fqoo5e1a8eobq].[usr:Calculation_60165344307113984:qk]' />
            </encodings>
          </pane>
          <pane id='1' y-axis-name='[federated.1nvb9cy1tthgcj1fqoo5e1a8eobq].[sum:v_1 (foreignbirth):qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1nvb9cy1tthgcj1fqoo5e1a8eobq].[usr:Calculation_60165344307113984:qk]' />
            </encodings>
          </pane>
          <pane id='2' y-axis-name='[federated.1nvb9cy1tthgcj1fqoo5e1a8eobq].[sum:v_2 (foreignbirth):qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1nvb9cy1tthgcj1fqoo5e1a8eobq].[usr:Calculation_60165344307113984:qk]' />
            </encodings>
          </pane>
          <pane id='3' y-axis-name='[federated.1nvb9cy1tthgcj1fqoo5e1a8eobq].[sum:v_3 (foreignbirth):qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1nvb9cy1tthgcj1fqoo5e1a8eobq].[usr:Calculation_60165344307113984:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>([federated.1nvb9cy1tthgcj1fqoo5e1a8eobq].[sum:v_1 (foreignbirth):qk] + ([federated.1nvb9cy1tthgcj1fqoo5e1a8eobq].[sum:v_2 (foreignbirth):qk] + [federated.1nvb9cy1tthgcj1fqoo5e1a8eobq].[sum:v_3 (foreignbirth):qk]))</rows>
        <cols>[federated.1nvb9cy1tthgcj1fqoo5e1a8eobq].[none:v_0 (foreignbirth):ok]</cols>
      </table>
    </worksheet>
  </worksheets>
  <windows source-height='51'>
    <window class='worksheet' maximized='true' name='CapMetro Stops by Zipcode as they Relate to Restaurant Density'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='slider' param='[federated.1nvb9cy1tthgcj1fqoo5e1a8eobq].[usr:Calculation_879046420456546304:nk]' show-morefewerbutton='false' type='filter' />
            <card pane-specification-id='0' param='[federated.1nvb9cy1tthgcj1fqoo5e1a8eobq].[sum:v_2:qk]' type='color' />
            <card mode='slider' param='[Parameters].[Parameter 1]' type='parameter' />
          </strip>
        </edge>
      </cards>
    </window>
    <window class='worksheet' name='Foreign Population vs. Restaurant Density'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.1nvb9cy1tthgcj1fqoo5e1a8eobq].[sum:v_2:qk]' type='color' />
            <card type='currpage' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <current-page>
          <multibucket>
            <bucket>true</bucket>
          </multibucket>
        </current-page>
      </viewpoint>
    </window>
    <window class='worksheet' name='Stop to Restuarant Ratios per Zipcode by Nativity'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.1nvb9cy1tthgcj1fqoo5e1a8eobq].[usr:Calculation_60165344307113984:qk]' type='color' />
          </strip>
        </edge>
      </cards>
    </window>
    <window class='worksheet' name='Scores by Year'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1suvkt31y0g1z610klyes1t6oi1o].[usr:Calculation_107523509364682754:nk]' show-morefewerbutton='false' type='filter' />
            <card pane-specification-id='0' param='[federated.1suvkt31y0g1z610klyes1t6oi1o].[usr:Calculation_107523509364682754:nk]' type='color' />
            <card mode='slider' param='[Parameters].[Parameter 2]' type='parameter' />
            <card mode='slider' param='[Parameters].[Parameter 3]' type='parameter' />
          </strip>
        </edge>
      </cards>
    </window>
    <window class='worksheet' name='Map, Scores by Zip per Year'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1suvkt31y0g1z610klyes1t6oi1o].[yr:v_2:ok]' type='filter' />
            <card pane-specification-id='0' param='[federated.1suvkt31y0g1z610klyes1t6oi1o].[usr:Calculation_107523509386072068:qk:2]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1suvkt31y0g1z610klyes1t6oi1o].[usr:Calculation_107523509386072068:qk:2]</field>
            <field>[federated.1suvkt31y0g1z610klyes1t6oi1o].[yr:v_2:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Average Inspection Scores as They Relate to Area and Income'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1suvkt31y0g1z610klyes1t6oi1o].[usr:Calculation_107523509384433667:qk]' type='color' />
            <card type='currpage' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <current-page>
          <multibucket>
            <bucket>false</bucket>
          </multibucket>
        </current-page>
      </viewpoint>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Average Inspection Scores as They Relate to Area and Income' width='192'>
      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
      SUVORK5CYII=
    </thumbnail>
    <thumbnail height='384' name='CapMetro Stops by Zipcode as they Relate to Restaurant Density' width='384'>
      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
      AElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Foreign Population vs. Restaurant Density' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Map, Scores by Zip per Year' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Scores by Year' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAAsTAAALEwEAmpwY
      AAAgAElEQVR4nOydZXgd15n4f2dmLl8xWJIlW7IlM3OMccgOwzbQbJtC2i50C0lhS//CQrfb
      7RbTLSWFJG2SBu2gkzi2Y2aQDJLFsph1+c7MOf8PV6YmXTuRIjvr+3sefbhXA++cO++Bl45Q
      SimSJLkEEUII7UILkSTJhSSpAEkuaZIKkOSSJqkASS5pkgqQ5JImqQBJLmmSCnApoCSWZV1o
      KS5KkgpwwbHZtfZhttf2DetVZaiNA4cakIDZe5SXXnzxPM+0eOPRH/LPX/kG3/3+rymv7UC+
      jcwHduykN2QOq8wXAuNCC5BE0XjsOI6xceqrDtHW3kl5eR1X3XE3oz1x3ly3jsa4i+tXX0Hn
      0QPUt7bSZ2Vw4w0r8VjdPPHHJ3CNW8iNVy2CQCsvrFmLmVJMvlbJo2t7uPnOVaxcWEh2ZjGh
      3hO88PxLSP8Ebr5+Md3V5TQNRDhcUcvCq65lRkkOoGita2PKirsYYx7iRz/6Fd/8l8/Sums9
      hxr6WXD5Kgr1Dn7yvR8y4+bbuPbKq8iym1izbieF01ewesmkC92g74jkCHARse/NF1n7ZhVp
      NPLYkwfYt/kJXqlsp8gIcqKrk5efeZrjYS+9h9fyu7Wv8usf/gRK59G97SXWbtzHL3/4HzSK
      LFJQaC4fhsuHz+PECp3gzTff4IkHvk+nNopQ1Vp+9+JOytc/zW9f2Yc73slv12w6JYfQHYwa
      M4bLb7iLmZ4AR+qaaWgKMSZT41c/+D0RQ0P6PKSnpeHSI/z0e/9D/vgytj/2Y470vb+mWskR
      4CJCymxuvekmpqQe5kdPSvLHlOHesIbNR+PcuciJ8Lq5/Jpr8BdY/HJHE0ZjLc28jtXfgzfU
      Rm27gy99/nrGZHqIt+9m46FuViyfi926A2kHaTNTuPPG6/HXCX72ygnGuh1cft0HWC4Oc2x7
      79sIZGEJ0JRJW8sxKhssBoIhHPmTmFaQy/xFSynJ7qO2tRtr8yaCcZu6ln6mpGeNfOO9S5IK
      cFEhEACaDja4/AV8+O++wN6nf8OabdW4bZu+ng6O7NtKTv5lxLoymLbqA0zxxYgID/WeHg5V
      VmNneclMgZ6eQ7R0zCdTAcKJN9xLxbETuKqrcGTOQAuDJgQKddZUwLJMmk7U8tze7ZSH01jF
      CTYak/jkzaP54c+eBXQ8WpQTDc2MT0vF70pn1a13kW12kJKfekFa7t2if/vb3/72hRbi0kYR
      DQbJGDuBdLdNdkEhaV5BRE8h19XHM088RQej+dBty6jc+Bp7jh3HM3o6H7n9ZpbMmcRLzz7D
      sYZOxs2YxzVLprHhpRc4Uhti3spl2LV72FFRx/R5c7BtL6tWLWDTs4/TJMbwiQ+txmfE8OWX
      UpAisNx+JhYXABDtbaXi0EFM91g+/U8fYWxOBjXbXqeipZ+xpTOZM2cqWX7YuH4rjrSpXHNZ
      DutfeZVjDSbzl8zB73h/zKy/853vfEcko0EvbqS0AYGmQjz481+x6K5/YmqOCyEEAEpKlBBo
      g5+llDD4WUmJAjTt5AupkLaNEjq6Jt6BFGrwutqp+6AUUimE0BBCIW2J0LRTcr0fEEKIpAK8
      b1CEAwEMbwpO/f3zkl3MJBUgySVNMh8gySVPUgGSXNIkFeAtKGzbwrTsU99I2yIajZ91lLTt
      vzzxvZFGSeKmyZkz1Vg0ii3VGccolHxrwMJwI6VN3Dz93EpKIpHYWbIpKc/6bFsm0dh7ETKh
      iJsm8ox2iMdiWNbpdlBKnfN3SvoBzkSZbFn3BH9+eT+aoXHZrR/lpokO/vt7P6Bb+Ri75Db+
      YfV0tm18kYf/tIF/++2DjHaBkhavP/wznj/UyZe//R0KUx3DIk5b4yF+9sAfsJE4Sy7j8x+6
      lq1//E82VIewU8fzlfs/RaRuF4/+8UnGLruLj1x/GbX7XuUHD/wZb2Y646Yt4WP33IpnqN2c
      klTsepnfPv4Gmi4Zu+wD3LtiLA//9PtUD2j4J17B/XdfQe3Bzfz6N0/xkf/3XRaW5NBYvonv
      //I5/BnprLjxI6xeNI7hWL5HAi384D9+SMBSWOnj+PLnPkX1Sz/j2W319JPB1775Vby9lTz1
      58cJZy3kvntvZOdjv+HpvVXY0X4Clpdv/tePgKQCnI2SeHIn86VvXEfrzld4dOMeRjf04Jl7
      B19enMf3fvAYbbMyaeqxcDk1TnY+gY5jbKzqY4xfYg6jTUF3+rj5w39PWa7Gd7/5CyrmF/PG
      EZsvfOPrbH7iZ2zcXkv2QC0pGWlEBkeotpZ6Slas5oNXLSYlLR33MI3xjtRC/v6+L+Loq+bf
      f/0mFe4SWnyz+cZnbuDH//5djh0vo7a+h4wMD5ZlY5sR1vxpDVfcdQ/zS0bhTxs+77BAsOKW
      jzJtXDoP/tt/c6Cukc0barn7/q8Q2vsoz75wiOX5J3ClZ9EZiqDQmHvTB5m4yqRyw1M8edQg
      368DySnQ2Wgu5syeg2zYz7OvrOfKK+fQ0h+kdMpEcvMKyfMGiWaO429vv4GCbC8A0gyx5vHf
      s+TmT5Dv9KKG0a6QkzeeWWP8PPnAD0mdOYfCdIUjfww5WVlMmVhMa1sDV912D0tnFsNgzGa4
      r5f9G17gu//5I9YfbHybSM53gdCYOHkmGbFWHv/dH1i4egWReIi80lLSM3IoLfDQj4s777qT
      8aPTALBiIRqOH+HlJ//Ev3zrP3nzQB3D1Te4U/JZOrOI1x/+FZ3p+cwf4yTsy6awII/ps2bR
      3nSY6Vfcxs0rppNoF4EnJY2cbD/btlRw/U1X4h40JScV4EyUzfGta/jyL9Zz8z9+mxsWTMIp
      NCIxC2laRIMSl6YlhnGR+Gs5tpsX11ZRvXcNm/cfYf3WQ8MmzkBbFV/51n+hT7+d+++9g1Sn
      gR2zUUoR6unF6fAlDhyUBWD5Bz7Lb37+c7756et5Ze1jdIaGYa2iFC0Vm/jSDx5n+m2f42PX
      LsKl6cRiicC3cE8Ip5GY9olBWTTdia9gKl/66tf56udvYsu2rWetW4ZCPNzFv3/7X2n0zuEr
      X/wsWR4DTBvbVoS7unA40tHOkGXwIWjd8yotGZNYMGnMqWslp0BnIOMDPPP8S5TOW0lfYwXb
      YxGmTy/jV8//Ee+JIpozJuANd7Fj735a2lvZsXkLCyaP5+s/+DaWsAhXVVFanDds8lQd2kJt
      xMU1aVG27djFlPEFpHTv4ZXXXmHngQ6uuaeMip1vcqCikjozzOHj4+k4sp5mCvB17ScztQCv
      c+izbqUs1r/6It6iYoxwM5t2SyaMKaH992t5PTPIrnAWK/wGe7dvoaa+icieXRR4F1I2IYsn
      X97EVHcjaZn5DJeTuKfxIFvqAvz9Eid7dmxj2ux5jHO38PKLa+k4vJcZ191HY/luKg4dpKUp
      woGKY0yfMJpnXlrPVTd9iTS3fupayVigM1CAw+vHbcWIxWIIXy4LLluEz+ymuV9w++23kSYD
      VB5voLB0MioSZcyEqZSNLyY/P4+crBzKJpXhNoZnYBW6TqrTIBaNYeKkpGwKc6aO4ejROqYu
      Xs3KuWOp3rWbuD+f/Aw/Ln8GpUX5tNbWEHbm8YE7bmFUintYZDHcbrxIYtEYtjOV2XPnUpiu
      caSmg+tvu4txmTqVhypIK5yAVwgy84tYsmguPY2VhEUWt914PWle57DIghD4XU5sM07chlFF
      ZcyfO4nm2jqyJizj1ium0Fx+iPa4h3Gjs9EdPgrzszFFOssWTsUxGBqSjAU6T0420cUR56JO
      zaX/mjzq9AHDYnX5q5Kc8eqcS5b3vu3O3S5/STIUIskljRBCvGUNEIlE6OjouBDyJEky4iRH
      gCSXLG87AlyqyI5y7EA3WuZE9Ix8lB1HdtcgUsejuU8v3pQdQ7YfRoZDaDkz0NJSUL3Hsbta
      EWlj0XNKhmztUOEO7NYj4M5Cz5sKdgi77TDYAi13GsLnQ6CQ/XXIgc7BszS0vLkIzUR21yJS
      S9HcQ/dIKyuCbK9ARqPoBXMRbjeq5zh2Xxta9nT0tMzEcfEBZMfR0/Pw1BKE1YMM9ye+cOah
      544Z8lpA9tUhe5rBk4c+ahyE27A7a8GVhZ5bhjASr7QKtWJ31gACLXc2mteDDNQj2xvBOwo9
      P5G8n/QDACp8nNi+11DRbuI7/4C0LMy9DxF95d+wmnvOOlY2vka85gDIECoURvVXE9v9NKgo
      KtCdMCUNRRYrQHzPY9ixCHbdOsyGI9jVm7G7mlHBWmJ7nwN70L0VC6ACHci+OuLbHkFJC3PP
      g0Rf+S5Wa8//fqPzRJ7YRLymHILVxPc9jwo1E9v5DERaiO99BGkNPrA0kcEOVLAb6+gzWE01
      qNgAKtCJbN9LbN9LQ28bs5P47ieR0T6s8j9itdcT3/MEMtSPffx5zMbq03L3NyIDvaiB48T2
      rUWGO4lv/wPKDKECXacUNakAgOrch8i5FufUv8ExyoPZ0odj1sdxzVqEss/2pVr1h9AzS1Ey
      G31UPrL9KCJ1Gsr0oOVOYsiO4FgvMpKCa8q1OCZdg91aiTHlOlxz/gYtczSoKCc9cVruTBxT
      bkTPLEArvhLd5cAx+xO4Zs4/rSRDRHbVYRTfgGPmxxB2PVbdXrTRt2JM+yCOLA92WyKZXriz
      cEy6EceEJaBlYpTMRS9YgGPKdQgFjok3wDvKQntbaUC6Eb5ihOEBpUAaCH8JwvBx5uus5c3D
      KF2OcKUghAvVewTlmAzKh5YzhZNJckkFAETB5aj2Z4luf5x49T4wbYTT9fY9VqwZGemD8C6i
      m59ARdqRPY1gxInv+Dn2QHRownhyMbItIm8+Tnz/WmQwBCqOWf4w8cN7cM79IGdpmYxi1byJ
      MX4FIBBO17CFHADohTOxjjxGbOcfsdpbwTYRnpSE89mXi4qfESWrFHb1WkTeFWiDNn/VV4nV
      78coLhy6SVZ4EI4AVs3r2P39CMON8IBVsw6r6wTCOMPPEO/FOvBb4uWb0XLGQ7wb2VeH0m3i
      ex/A6gkBSU8wAMLIwbXik6jQAFboCFpm+uB/zgzztQANfOMxxi1HT3cj3/gJGFPQxxTgnDgH
      M9iAikQh9d07n4RwYcz8MFpvK7IrBUIKu+YFrB4PrmX/gHC7AYmyJUI3kO3bUMZ09Kz009c4
      wyY+VETufFyXFaOiYVRfHSItE7urASVHYXdVIsZdibJN0AyQUcymRhwLbxlcByms+t3oxfPQ
      htz7A6HjKMd83EuuRjY9i1m9G2L5uFf+DarzTeL1DRiFhaAEaH4ciz6PI9JGdONDaFOXoRdk
      4JiwEs06gQokFeA0so/4zt+DkCg5AWeaSXzvo9gN21B6H6ZxJ8I+jNTmYIyZRHzPT7FdNqQt
      RC+chPXm74j1bcQOOnBN8Q5RmDjWkTXIgTZkfxTHvHuwjvwCbA/x3b9ApM3CUZSDWdWCc9Eq
      zJr9GBM+lHjhZJD4vscScjv6EcYHMUrKhtTzqp7DxMtfg3gIMeo6jIJxWEd/TGzjayh9LK7s
      FMxdD6JPvgMR2YHyLUDzpyRONruwOnpxTZ4wxDYZxFME4eeJbS5H9XWhz/koquY5Ym/+CBXq
      QZtwN7L5VeyBsRDYhowFgBCklaHlToWKHxPbvB8ZiONakSjfkjSDAiiJivQiLRvNm4HQdVQ8
      xKluVPeAsAAH6AIV6UVZEs2XjdAEygwiw0E0byY4XUMb6pVCWRFUuA9c6QiXB6wI2IMV1zQn
      GDpYNjjdYEbBGKwSoeTZchseMBxDUwBposK9KAw0b3oiwswMosIhhC8L4XAk7ml4QJmAgdAH
      Y22UjbJscDiHySOtUGYYFQmAIwXh9oIdRUX6wfAhXD5QcZA6YKLiYVAC4U5L/KZWGBnqR7gz
      EG4PWtITnORSJpkUn+SSJ6kASd5TlLRQI5Q/fU6kjbLiZxkIzrkIjgS6qGtKxAZphpPRRWOJ
      9jTT0tVPalY+xYW52LEwDbW19EUsxpZNJsvvINjbQU8IigrzsCL91NY0EJUauaOLKMhOe8+e
      8b3Gql6DVbcfhERaWbiX3INs3UG8tg73yk+iuYYnH/h8UKE6YtsfBhQq2IGx8Ls48lOxG9YR
      q2rDc/mHEY6RsXMoK4h56DFkdwvKHIDMq3COycU8/CIKgT7mJhwTZoxYRK19YgPm0U0gFDLu
      xDn3bqwjj6FiAbSia3FOWQ6chwL0t1axZs0miAfYdayZL/7z53nkVw9SVjqW2qYOPv31f6V/
      56M8sqmJWSUZdKpsSu2D/OQ3j+IaczX/+rWP01W+id+/dJQ8b4TGbjff+u5XSHuf2p/08Tei
      l1wPAweJ7qkGFULFbIh3wzBlPJ0vwleCa+XXwewl9sbv0TJTUMF64pWHEZ6xIyqPMPw4Zn0c
      FNhHn8QWOaD5cS79IsJqIbrjeRyl02GEqtppoy/Hlb8MQlVEt+9CdW2ErBtxTx5LfMsvsYsv
      Sxx3rgvlTVjMV7/6VW5dOYcp065kSoGO05PJ6htvZCIaLb1dvPDSQVasvJxJc69gxawCfFkl
      /NNnPg4kLBeFC27km1/4FCuWzMXSreHJU71AJJZNceK7XsGx6Fa01EKMSSsRLteFkUc3kK0H
      IGcmukthVryCMfkGNOfI9zBC08HuxmxqwyidhZ43EawW4jv/iF5yNafcryMhixCggXnwdYwZ
      q9BSC1DdldhdjahYN6onsSPP+UkkY7z00iaWX7uMFF8eKfYJHvr1b9hu+ZiUBb2dnRyqOMTG
      53/Hzx7bTPa4KYzJ8pw6XdkxXn/qAX754DMUFE3F+z5feaieY0hXCXrKMGU4DUUWO4hVewij
      bDGycw9Waweyvx77xB6szrahht+8M1mUwj62Dq3kSjSXjuo/RuzNP6OV3YFj3NRhS4k8b8It
      2BEHenYOWv5SjIJU7NYGlA34EvnU534VlaKneht1qoS5k4roOraJQMZlfPM73+JKf5A3a6Pk
      5ozltts/wn0fvZ726goilo2UNgqJlDa2Lbjm7i/xL9/+LN3HNlLTFz/nbS9alI1V+yZ66UoE
      oOw4KjYA1gAqFhiRAlVnIpu3oFJmoqf7ESkTcc67Fd2XivBnIhwjrKB2BKvtBEZRKSgb8/BL
      6BNvQs/JQ8UjjKjFXUns4y+gjbs2sQ5SCj1vFo6xxQi9CH3QW3/OcVKaQZ5++DmuuOufyfYa
      REtmEG39Pg/8tJPqgOSz+fkUryritw98j7RIL9Ou/hT7nnmEjft3Unl8gD/8MZMJvj5eO9xF
      hhbE8meQ63mfLgAA7CAiYylGYT4AKlCNWfEqWlo21rGXMCbfjJ42kptEZOOYMiHhaHJnYBRl
      oGQc9FT0rOz3NCXyLVh96KW3oPk8IE207HHYba9jtgFps3FOXc6ICSSjKM8cnKXFiY7K7MM8
      8BhK+TDm3Yk2mLd9TkeYkjYD/X14UjNx6gKlJAM9nXT3h/GmZpCblY6yonS0tROVBgWj8zAH
      +gjGE+XwDIcLv8egu7sH04a0rBwyUoYaLpAkyTtHKcnghgmJYL6kJzjJpUzSE5zkkiepAO8C
      Je2Lx7upJMq2Tns3lXyLtzPJX+d9vBq9MNgtb2IeeR0kaGM/gO7rwTy2CVAo24tz8WfQUzzn
      vM6wIAeIbvgvsAW4ynAuvh370KNYXfWI9Km45t5+Kkd2ZFCo/kqi+17FOetjaB4T8/AaJONx
      z10+gnKAssLYjTsw6xpwL/8w6BLZsp/40V24Fn8SzZewAiVHgHeISJ+Gc/k3cF35VezaPyOy
      l+Ja+XVci/4WVAbCM5IOMQeO+V/CdfW30PQqzOoNWIFRuK/6Fppsw+x5m71/30OUtIkffB6h
      u1DROLK7ChULo/q7RlQOABXuRPZ1o4LNibRWM4jd1QLhFlT89GbeSQV4h2geD/bxtUTXfApR
      eCfCpYMmMMtfQ5+2GjFMZRHPUxiIVBJb/23MrlQcBYUQ78LuagIZRLa0j5wsSGT9C6i0peg5
      eYCGVrAQR+kcGNFRKIFIGYNj2urBDDrAmYFj5i0Iv/+s45IK8I5xoOfNxDHrw6jO7aiYBdEO
      7AELIzdvZO3ugOYvwjHpBvS0GHakAEdZCXbdXmQgjEhJGTE5VKSd+MFNCDfYzRVYrdWMvOv3
      NEKIs3wOQoi3DcRLKsA7RPaeAF8h+tglCKsTZZrYNWvRxl6HcI5cJCgkXjoZd6Hlz8bITkH2
      B9By5uCcey1CpKJnp5/7IsOFkY5j3j1oBgiHI5EVJm2QZiJrS9oj6glWSibuLSOJMOhBYwEy
      grJPbzmV9AO8Q+zGNzCPbwOlo5XdiaMwD6tyD8aU5SPe+6tYB7GtvwGlgW8KrvlXYu58EDs4
      gF58K46yaRekoK/ddhA841Ddb2I1HEx86ZqIa+Etp9Ml32Nk9wHih15KfDByMUrnYx97MREb
      paVgTL4Lx6jcpCPs3XDSoyhGMLrxr8uiQCV2cRdCnP6s6SOukO83kp7gJJc0b1sbVEqJfbE4
      eZIkeY95iwIopTDN92Jf1yRJLj6SnuBBVKQboiHwZiNcXpSyITpYf8Y4vXBTVgRigcQHRzrC
      YaAiPRCLgn8UwjEMFZntKIR6QLjAmw5WAKzBHArNA27/qcWtCneecW8nygxCsBvcWeD2DXkR
      rKQkEIwQiCsy07x4HAIzbtE9EMVwOcj0uwdLfiriMZNgzAYh8HmcODXoHQgTUxrZqR4cI5QO
      +U5IKgBAvBW15XeQmooKS7QVn0YdeRx1+HXEov9EjM09fWz9OtSJSvBlIPKvR6WEUHueAb8G
      xgSYfcvQCuTKGKr8TxC1wOqH7MsRrm5UVyOYPagBH9rVn07k1sbbUFt/Bb4MkGMQS69H7X0Q
      lAPCfYjF94NnaGEZrc0tPH+wi0y3Iu7J4NZ5BbzyxiFsrx+vw8nyheNI0QEl2bypgibDi88w
      WDC1EL2nnRcqB0hxxMkcM4ZVk3KGXh93mEkqAKDat0LOLYiZkxAHf47qCCCKVyFkd6Ky2ZnH
      RiIw+mpE3niEPxV1/EUovh1tXDFy9y9gIATpviEIY0EwBmXXIfrLUbEIYuIqRLFCHXscsuee
      qrKsGl+F0r9DjE1HbX0I1Xsc7GmIy66AuidRza2I0nHvXhagobmHyVNKWVbs5fX1hzjcoDGg
      pbBobBaZGSn4B5Vd2SYtMY3LZxWQ6feQ4hI8u2eAW1ZMIl3EeHJHE9aEbJwX2Shw4e14FwM5
      86D9FdTR9ciWYxCOIPzZiYKvf4HwZ0FvFWrvL5G1x0FT4EkHoYO/AOJDXD9pLkROOmrv75FV
      m8GfD0KgIi2otjCipOz0tMYS4E9FaA7QYhAOgD83YZ5NL4LI0FNP80elUX64nu0Ha9nTEaGv
      L0B1Wx8NrV08v+Uo9QOJ51VojMtzU3GsiUfWH+VwWwjd68Dr0HA6DXRdG9mUyPMkOQIAwl0M
      i++A3h5IGQXpGX/92JJrECWg7D7Utqdg1CiIB4AsCDRA/hDXAGYvqtVEW/0tCB5DVlRASRk0
      74X82QjHGX2WDoRDoAxQTvD6INKRcPb0N4B71NBkAYqLi7jd10dnWDIpbYCsdB/Ty9K5+rLR
      1B45Rk1HjJI0B5rhZMn8xK4rjbXNHO8KYMXiRG2Jy5bYpnWR7LJ5NkkFALD7UbU7QLMgXoRI
      B1X7OqrjKMrwoVKuhvhxEGWozvWg+yDaBGnzIDsD9j+LDKSAKIS0IaZ7ah5w9aEOr4FoC7gm
      JORrrkcsvBYAFaxFNXYgxq9EbX4Q2TMarCxInwDmOtT+DuirQyy8echN09fbz5GGfqKRIGZ6
      DpOKsjhacZQ39pk0nwizYKmTffuqySnI5vCxZlwZKbSe6GDctFLGGXHWbqslzxUlNS+PkYwT
      PF/e4gizbZtYLHah5LkwqDiq7QhYEjLLEF43qqcWrMHpjLcIRBBEOjAA/S2guSB7MkJXqN5a
      VLAfkTsN4R5qLoBCRXuhuwal+xGZ4xGGRAVDkJo1mOA9AMEIZIyCnioIBSFrIsLrQ4U7UN11
      CF8RZOQPudeNRWM0tg0QRaOkIB2/QyPQH6K+K4Q31UdJrp+ergG8KV6iwTCtgSgej5vC7BQc
      2NQ19xJWOuML0vE4Li4N8Pl8b/UEX5IKkOSSxOfzJXOCk1zaJBXg3aAknFkAS6nBvNwLYeVQ
      CVnOuLWS9ogX6ErcWGHbNvYZ7aCUwrLliFaoeyeccxFsWybR2KA5TQhcLjfSihGOxHG6PXjc
      TpA2kWCQiClJSUvDoQtsK45pStweDyCJhiNIErU13R7PRecQOV9UsAlV8TREw4iyD0N+LlQ/
      jWqugaz5MH31yOWBKBt5+E/Q1QhpcxCzVkPvflTFiyDT4LJPIVzvfr+ydySKUnScaOXZ/W34
      U32sXjCeTJfN+s2V1A9IJk8pYvH4rIvudz+nArRVbeFnD68DK0JNe4j7v/wF1v7h1xgeLwHb
      xX3//BUGDq3hV8/upCDDw8xrP8Us/wl+//CjhNIX8v++eA8E67nvE18jvWw8aelF/OP9f0/a
      yISFDzuqZj0UXI8YnY/a8ADCXo7q8aCt/H+oeGRkhYlUojoNtOVfgl0/QHXNh4qNiHn3IdwG
      Sh+50ohWJMRTe9q458bZtFfXseVYO0XxflRBIfcuTyduyYsyPPucCpA/cSnf+tYimg68zsOv
      tTIuM0LMlcO9997F+l89RGVbFwde3MXK625jYmEOY4vz6K5qZtlVV7BuzwACiHQ14Z8+n49/
      +A5G5WST+j59+QFEdjGy/GmoV5B6GYRqUcEB5OaHIH8GomQu6CM0s3SXIKK/R+0IoHp0tMmt
      yEAYDj+L0r2IadcNORTifBFC4HQadPWGUGg0tPUTswdQIcmf61uYMGkMs4pSEBeZGpzzl9J0
      Bx63k22btjLvqhVkZ5WQEa7hgZ/+hM1hP3MKoKWpme1bXucPD/2cZ948RtH0RSyYVHDqGvGQ
      SbCtjl/+7Mf89JEXiY5wHf1hZaALUTgLUbwcFa1GxW1E5kTEjFXQsQP6QyMnS2GW8G8AACAA
      SURBVKQB5Z2MGDMbkamjuvvAk4+YeBX4+lENJ0ZMFMPt4boZOew8UMeB+l4Mh4HSdMrGFbBs
      ag47DzdhXYR18c+rqwq1HuBAdyaXzRhHz/HN9GUt4jv/+i9ckRZkQ1WQjNxS7v37L/CdT9/M
      sT1biUjOSkjOnrySX/78Ab73rc8Rb9zC8Z73b7i1ivQjsqZD4WyEHQRPAcqOIdLyQVcju0lG
      rAvhHAujZyMy0kFmJfwVrnSEzw8jmtchSM/K4q6rpzMlz8+4nBSKUtyE0cnO8GGo4du7eDg5
      d3VoK8xLf3qOBbd8lFyfg3DOGMKdm1i75nnKQya3Z+SSOT+Fxx5+kAKrjTFjrqVq8zoOHt5J
      Q3U3L7/6JpPSuvnj5jZKvAFichRFaSObPD6ciJKlqCN/QlXGEGNvRxSNhsNPYr/x74jcKyBz
      5CoxkL4AnL9FbtqK8ExBzJ+I8HahdnwfZRSiLSgeOVmwOV7ZxPamfjJS01h92Sj8MpXnN1Tz
      ULlixtSxOC/Cqe85HWHSjtNQW0NO8UT8Dg2lbBqrDtPY0U9qTiFTJ5ZgR/o4WnGEgOlk5tyZ
      BBuraRlITAU8vgxKxmRxvOIoQalTWFLG2Ly/HmvzfkBJO5ETPJjgrZRK7OOrGyMf76JkwuSp
      6YP3TphkEfqI5yyfNHnquoY22A5SSmypcBgX39uf9AQnuaRJeoKTXPIkFSDJJU1SAYaIUgrV
      dxy5/0WUeaGraShUvB956E+o3hE0x/41WZSiqqqRdRUjXxz3fEkqwFAJ1KKObEA17x9hs+Pb
      YSfCNE7sRfUFLrAs0FrTzJ7KLsqb+i60KH+VpAIMlZQSxPy7EV4vFz7iS0fM+ghizPiLQBbI
      G1fADfNH43deXN7fM0kqwBARQrugVZDPRiQ2q74IXn4QaBdB6chzcfFL+H5BmVwkbx5gARdH
      3IFAYauLQ5a3I6kAQ0T1lqO2/QRl96D2PYzq779wwsgActcDqI5WqP8tsrbywsmiJJWVDfx5
      dwux/n4e2lBDzL74FCHpCEtyyZJ0hCW55HlLMJwQAn2ENjFIkuRCk9wfIMklS3Kn+DORNjIa
      PWvDaRmPcT4GDGWZ2LFh3JxaKVQ8ktje85Q4Jsqy/peT3juUksj4GZtx2xZ2NPY2z6tQZhw5
      1PKQ/7s0KNMctrZOVoYDVLyP3t8+gkJHurPJ+tB1DDzxZ+ywRIYtUu66G/eoVACs1hoGXn4d
      UTCbjNULMBsq6H9xE0LF0ScvI23lvCG5BZSMYR16DKujAew4xpx/RAtVEa/aCJpCZK7ANecK
      xMkCuVaA2GvfgsLbcJWOI7brEVQ8jOo6ijb3P3BPGD+ktrGaK+lbux5N11DpJaRePpmBp9Yk
      /pk/iYybr0bTAGUT3buJwLYaNH8KvquuQQ9W0PtaBbrHgTF1HqmLZw0tXNwOEdv6P8hoEOIa
      jmX3o2ofwWxpRTg1jGkfx5E/NnFo6xZiOx9H+LLQ82/FyFPE9j+HQGJ3teC86sdAUgEAsOt2
      ogouJ/P6SYTXPkq4TZFyy10IHcLrniY+EDmlADh8uKfNId6f6I3jlYdwL7kN35R0+v/8OPGB
      GbjShpCMHu3Aag3jXvVNZOt2zMb96BPn4y5cjArVENv3GqiVnEy5s6teQLkmoQkN4SnAtexL
      YAWJbXwQR0HeEFsG7I5W9DGzSV1SysCal4iWD6BPvZ60JaMJPPMnYt1RPDluZKCTYEUrabff
      iObxoad4ibzWhfvq6/GNzUHzeGCI+cDK6kJG0nEuvhd5+GFkoB/VH8ax8HMYqX5wnN6kXIVD
      6OM/jGP8YLU+IXBfOQMGKont2YOemajgnVQAQBtVjPXCDsIVFrHmFrTCINLupv/JF4nbPnKv
      zjx1rJGdB9EQ8UAHAHpmNoH9e9BULvHWblwDURiKAjhSEEYvZtUe6D+A3e1Bmz8K2XuQ+LbH
      MGZ8Ck56WGNtmM29OCYsxg4mYn+EpiH7KlGuYjTvEOuUAkZRMfHnH6TrsBtRsARfiY/el3YT
      yegh3tKB6ApBjhsVj6E6KglsdiA7O/Fdcxv4vMT2bCa2PoRn2Sp8M4uHJItwFaE5a4iu+x4q
      LPHM8GMZbqxDT2OF+nAs/SRGxsnfKoZs2UW06VWMiXfhGF+GEDpmzW60kvlog4ULkgoAaGkT
      yLrbQbSuA82fhpGfjjE6j6z7JhJ542kC+xvJWPL2UwnXnJWI1GOYfRZGZgpa6tCqMAgjDdfK
      z2BV7kA5R6FlGcjOnUS3bcS5/J/R09MTUyxlEt/1CMrOxKpehxwIYxXMRk9VmAfX41h0H8NR
      hCdeVY5n1b2kLChi4Ok/YjtuIfPGVGItQfS0FIzsxM7rAoE2cSmZN12NVVvOwPFqMletwrMU
      VF8bXU+twzvtHsQQKuSq/oNIluK97Tpk7WOY1c24lnwaANnwDPHKPRiLrgFAH3cj+jhA9hHb
      8DCq+HNgt2G19+KaPvHUNZMKACAjmG0hDL+DWDAVX2qA0O6jGBkpSMtGGBpW0zEsNQrDESBe
      34Td3Eu8pR3NDSqmo9sd4BmPI2WoTWojO+rRMnKx62rR85ZiVb2EXjILQnVIKwfNZ2C19WLM
      vRcjFkF2V2L19aH53Mi2HSj/ZPQU17AUINHcHqz6auJVQaw+gYswVq+F7ogRl/k4M51Ey/dj
      jC5CDzcROnQM2mvQfUVEdm4Gbw4EWhApuafWLe8aIwXMeuzm/cj2VkRGGebBdWg5ecjWerT0
      lcjeI8hIJgQPoPR0hN2OcuYhhI19ZC3axJsQZyQnJ61AAEIg+7uIt/bju/k6DK8fXcUwm5og
      bQops4sAgSYEsq8bKXVcxdlYvf2gFFZ7M2bIRcoNy9CGo/SZimK3HUHkLcQxdjJ6yXI0I4Ya
      OIEM9YJSCF1DeDPRMkajF87BUbYMzWkgfGNwTFsxbNV3nFMuw1PkIdbQhm/lNTizvdjd7Zi9
      Fv6brkLXRaLWjyOF1OtvQHU2ovxFpMydgbO4CNnVgm17SF+9csgjkvCNxzltAbL7OGQvwzlh
      JnpuBrKzEpG9GMf46SAUaAIttwzCTcgYOOdchxAKkbscZ/HYs9om6QdIcsmS9AMkueRJKsC7
      QCmFkhdrxeNEKuLFMrArJS8aWVAn2+b0V+9yxaYwTRvdME5N66RlErfB5UzUxjn5kmj/5+KK
      LKI7NxKt6cQxaRa+OZMBm9jBHUhvKd4JQ9+X63xRkRPEDz6f+CB09LIPIsKHsOr3gLsUx6xV
      aMbI2TnsliqC28oBcMxYgCsLgm9sQzn9+K6+Bod35AqiyfZdmHV7Ex9c+RjF87CPP4eK2Yj8
      lThKZwDnoQAnDq/nvx98Aew47SHF57/4RTY+8Rs6AjH0jCLuv/8zBI69wc//+ApuQ7DszvtZ
      kNPPs089RjOT+crn7uTwc4/w6JZDyFiA7gGTb/70QSZkvD8NULGDO4h06qRet/pUmIRsqyS4
      YQva1PQRVQBcuTgm3wwyQnzrQzAxit0Zxph+B7L6Ucz6KbhKS0ZIGEW8fB/a9BV4Mg2Ey0Fg
      7TO4Fq9GDNQQeGMbGdcvH7HCYSJjCg53IZgdxHa8CuMWoRWuRkvxYO78FXZuwhR6zilQXuki
      vv71r/N3d60mN72IHGcbNSEv//j5zzKmt4mddZ2sfepl5q26g3/49GdZUJpFR0MtzoxcgsEw
      SmlMveZv+PrXvsaHrl9BSsFMit7H5aHNujqIBQlu3IodkahoH4E39uK78cpEOuIIIjQnWloB
      xPtQ/pno6Tk4Z12F0G1k9wBaeurICaNM4h1BzBM1xFp7EpY14UT3ejByC5FdLSh75KZCwulH
      pOYhWw6ijb8BLTUXLcWNXb8JKXPRPInR6JzdsOHyke3y8ervtzDrmg8yprCE7P6f8f3/+B6d
      1igeLIaXj9VTGXmCDc9Gue6eL3HL0hsoKdlC+W+PAAK3PwW338mTWw5w1U334rnINkt+JygZ
      Q/Nl4pmUycDLa3AX+LDdeWhmCLs7hoxbaM6RHN0kVvUWjNI7EIDsPkhs2xMYMz+KkZV5zrOH
      DwPvVauwevuJH9hN/4kS/DNLGXjlRdAszPDI7VVwCjOA1dyJc+U4BArZW4sMtIPhQJmJUJbz
      WgRHuyrYXOfiygWT6K/dTk/2PL7xzW+wLD3IG8cGSMsr5R/u+ybf+8wNbH31ZcL2YJ74yT8U
      7Yc2UaXlsWLOhPfseUcCPaMALTMLZ3EZRqqOSMlHd8SIHKzEOlGHNTCym2TIrt3YViHG6DyQ
      AeK7nsNx2RcwispGVA4lLZRt4J40De/8Cdh9vRils8i8+w5SF8zAOSoXMaIdn0I2rYP8lQiX
      CxUPIEYtwnnZZzAydGRnolTLObsqZcfY8MSzTLnmZgrS3QR63EQD3RyrrKI1ZjHRncncCQbr
      1r3MJGrJTJ9B85F91B3bS0dLK3v3lTN35gReWvcqi675JFme9+/0B8A9ezb9T71Mz4FNaGNn
      4F28EM3QUL1VaFUOnNkjWB0akO2tGBMXJAwPkW6UHcA8+D9YKPTJn8QxuuDcFxkOlMQ8vpvA
      i+0ooeO9fBWx/dsJHzoOePDdfMvIVs+wQ9gdMRxzZiKEQAbqie15GuFwo4zRuKYkCjSf0xEm
      zQh7d2xj3LzLyfLoKGmxb/OrVNR3kT12MlevmI/Z18KG9ZvojrpZffO1dO/fwuH2XgDSskaz
      dOkc9m/ZzrTFS0lzv39Lo59ESRsZt9DdrnMffCmhFMoyQXecCnuQsRjCcCBGatec/wUl7cSG
      goNVvIUQb60OfX5XUqds4CdX9acuIy62TXCSJHl7hBDi3a3W3uYlH/G6+EmSDAPvT2P8Bebk
      aPeW0Q9x4YvEnRqdLwJZ3gckFeAdYrXVEtlbjjQFrnlLcWY5iOzchtkTwbNsJa6ctJGVp/pF
      ZH8XaAbG5NuQdc9jD/QhfBNwTF52ahebkcBuryW05xgAjonTEOEW4k09AIissfgXTBl6SPQ7
      QA40YrWcwFG26NQaxG7djjRzcYxJ5Hdc+JXJ+wylBI7Js/DOm0bwlRcI79qIGUvHO6OE4Cuv
      YsVHsvqZxGooRxu9GL1oEUK3UZ4yjLKroW8bZlvHCMqiiB/aDYWTcc+YjiMnE0fheNzTp+PI
      dhGtbBxBWUD2VRHf/STmoXWnbP4qXEd81+NYTadlSSrAO8SRNwbd7yBWeQCRORoVj2DkjsYo
      mohh9GL1jKAfQA4ge7uQvZ2g+cHwYxSMg3Andm8IzTf0lMjzRlnEW/qx+zqwIzaa142emYOj
      KA+rsRXP4oXDkqF2vojU8biW3ouWljBLKzuCeeB5jJl3IZzuU8clFeCdokzih8oxmzrA5cE1
      aRbRfa/Tu2YNkcaBkbV1Cw/OeR9EiADxDf+B1RdGBZuwGraiDANGtBanhvfKa3ClO4lt3UDf
      64lANLuping0G29Z5ohaB4WmwxmhKbJ5I3bIg+aQqGAX0owDyTXAO8YOx/FcfhVeYdL7xBPg
      nk7mXbcjo30MPLMePW3kfAPKiiAyytBTZkLfJmRXB3rheJyLpyDrn8RsasHIGpkdOZWUYPjw
      TC/G4bPp29UGKKIHynHPW36BeloFarCWkkhFeNyY1duRXVFk/2VAUgHeMfHDOwkfqAdDIPLK
      INBI31NbkaaFa8m1GO4R9HTbIcwdD6GEBRTgnKIT3/pDEBoqbuFYcM3IyaIsYuVbGKjrRtkK
      z+XXQqwbM+wnZfwIRsgOIrv3E9/3LLKvntj2h3DOvhv30iWoUA3xmn6M7GwgmRL5rlCWhZKc
      CnpTZhyFhnAYI+8ElDbKtsFwIkQiAQXbBOEc4dgbEiZY00x4Wi8Cz++5ePee4CRJ/g/wtp7g
      iymdLkmS95q3KICUMrlBRpJLhot/ojZSKImy4hfHNl9Koax4wrJyEikTkZbncS6WOazPoaQk
      ZtnnrsisFNKykWccaFsW5rCaYxXY1hnPd/LzW4VTtomyz2gzJd9SWTppBQKww8hdv4ZoPypt
      BmL2zdBZgapYg5j8T4j8k6ZEC7nzxxAzwQ6DZzJiynLUwUcSP0hKCWLaHQjHEPoVZaHqXkM1
      7gPdAzM+Dq4gavfDYGuosdciimcOlkeMo2pfR7V2Ii77CEKEkLt/BdEIkIGY/zGEd2ilGvt7
      enlxZz0DcZuJk4pZUpzKK5vKaTcNPB4XqxdPINutIW2Tffur2dcWw3AYrFxQit7bwStHuhEC
      Fs+byJRc79DcJDKOLH8Mek+Alo2Ydzeq6TVoPQpaKmL63YiMrEQz9lWhyp+DqIQZH4MsL2r/
      IxBqh9yVMPlyIKkAAKiO10FfiFg2G7XrZxCIoQKdYFioSPQMy46BNv++xDm1j6LisyDWA+nz
      EFMuB6Ex1FJLKtqOrK1FW/k1aH0T1bgb7BYovgNRMPbsnk5GUbYbzGjis3Agpn0CPD5U+c9R
      vb1DVoDK6iayS0q4c5yb59ZX0pzlAqefD11eikMX6IOFemOBENtPxPnUjTM4XllLRX0n3Sc6
      uOHymbgjfbxypJmJOaUYQ9GAeDOqW6At+xIceQjVXgPNnYhlX4aG51EdjacVoGEDFN+FyIyi
      9q5HTBgP1njE0ntQu34OgUVAcgqUwFeIClRDVz1YvaiOHrTxVyIyR711KqHpqHgnqqEPMXkK
      qBiq5RBq64Oo2vKhzzwML8JhQ+tx1EAbqr0J+mpQ1a+hNv0CVV/BKaH0VLQJS8A1mG8rnGCe
      QG35T1RDN2LQ1j0U/H43LW29NHYM0BWO0tYXoqG9j7VvlPPqvhbig6J4Uv3M8ET56TN7eXZX
      OxMLs0jzGFSd6KG1O0RNZwhbDrF13GMQxnHk+v9GVjUh8iZAegT52n8jD2xGZBWdPlY6EBn5
      CF8xqG4I98CoGQjDj8ibguobAJIKAIBImYFWWoxqq4G4hJRzRHR27IVRsxLDedZMtGWfQMy+
      BZrWQH94aLIYaYjZN6A6j0AoBv4UMPLQpt+MmHczqu3w/x7i4CtCTLsdkZ+Bam0bkiwAZePH
      MCMLqluDeDSd3OxMPnbDTFYtnoDR086BtsToE+oPUWX5+PCVU7h+Vi7HW/tZtXA8KjBAc1+c
      XL9r6HVTQ8dBm4F22UcQU8ajqndBKBtt8T1os5aiWmrOOFgOrg1s0Jyg62BHEl1HpBuMhMMy
      qQCQcJenliHGTQOVjch0o2IDYAUTJUfMOCrYggoGUXY/qvEoonhh4tyeKhjoB2En9qYesvNJ
      gfIhJq8EtwOROQ5SfaiedlAxsGNgBlDdbSg7jooOJKZA0X5UtAt6e8Gbg0hPg/DQlBFAKhhb
      lMesIh84ffisAFVtETShCFoKlyFo7+glFLWwLInT7UDTIG4rTKkxd+oYxqTp5KSnDEPTSJAm
      GO5EQV7bAhkDww1CA9tCRdpQ/QMIjw/VWoFq3Qp6AaSOhubNMFCL6u5AZKYDyX2CE8gAcvfD
      YAlEyfWIvGxkxTMQDSb+n3c1Qj8B2kRINVHdcbQxpQCoYD2qch3E44gxNyFGjx2aLMpE1b2O
      ajkK6bMRky9HEEIefAwiFky4FeEJo050InJTUNWbEudpBmLS36Cq1yQWwc5CxPRrEY6h5WD3
      9/Syfl8zQWVw5cLx5DpNtuxtoDlsU1iUx/JJ2ZQfqCN/XAHhzg421/ThT/Fz+axC+ls72Hq8
      B7ffzzULiklxDL1zUHWvolqPgHciYtrV0LEHVb8DXGMRU66F4H5UeDQiLwV19DmIGIhZdyBc
      Oqr+NWRLJWL8LWj5Jfh8vrd6gi9JBYBTdSOF9s4HxVMZYoih7gJ0liwkErcHv5KgOLd8SpFY
      I4hhi0xVg1lm4mQqrFJIEs975i1O1t0U4nS2nJTyZAL6sMjylrZRikHp3nIPNVi675Rh4i/O
      9fl87zIn+P8iQ/iRhj0f+m1kEUI7P+U6VZBpOMX5ixxwId527px40c/+TnsXHco5hDm7bcTg
      /gRve6j2l1+8pV2Ta4AklzTvujq0bUs0TT+l8cq2saTCMPREISLbRiHQB6MClbQxbYXjQkRM
      DiMqPgAte1HRGGL0EkRKSsLD2HUI9CJEZtbIytO2B9XXgUgZjxg9ERVphca9KLyI8csQxsjV
      YQr3D7C7phuX38eMkmw8wmJ/ZTsBpTOrbBRprpELFVdWGFr3okJBxKj5kJYGbXtRAz2IzOmI
      3ITJ9JwK0Fq1ld88vh6kTVS4+duPfpyK15+k8kQ36f+/vTOPrqu68vR37n2DpCc9zfMseZIt
      29jGYIPBQAAHSAKEIgkkqyFJJamuZPXqVWtVr+7Vq6t7VVV3dXV1dadSvaqSEMhAkUCcEAZj
      wDa2MbYxNraQB2RbsmRrnqUnvfEOZ/cfTx4YqnB45gmK9/35dCX93r333HvO2Xv/dt0yvv61
      LxLtO8Y/bX6BaMJm4/3foXyqnad3vk7c9vOZex9k3aI8/unRH3N2xGbVjZ/n7tuv+uS+enq2
      I3E/qjgPOfIkXPdNsM4ihx6Bqm+ldwAketEn9mMsugY5vRny/gR5+0koXJ1sDZrGtA5txdny
      +hnqFtYyMzTEAVGUhKc452ZT4Z1l2zGX+9bUYKSrYm7odWRoHFVdjbQ/iVq8HjlzAtXYgrz9
      FAT+PXAZU6DimmU8/PDDfOmz64mFLDzx07zaHeHhb30DX+chdnWOs2XzU1Ss2cT3vvttFpZm
      MTmh2fTlb/Llm+rY9vx+ut78HV2xJr7x4G3sf/E3DEfcj/z7f2SYXrAELAs8+SAx5PgWVOtX
      wEjzksrwoVwXXBNcH1jnkFAAxAZVBGb69DiWxYjrY11zCdctrGRwYJLOKZuNrZVcvaSO+PQs
      TlorNH1guWC7c/XSvmRxvKtAci5sV3/gAPDlFFBXV8epo4dZdsvnaK5fRuHkKX762GMcDGWz
      rtblxIkBju55hj//m3+gayzOtZ/bRGNOlCe2H6F23WKGT4zQcsN11C9eSmOJYjRyGUldH1e8
      ORA9hYx0IJ5s6NkK1IHXhfhMsjglXYgBZgQZeQvRAtYs2CPgL0L6foWcPZc2Kd6cHNaXe/jx
      i0f57f4uesIaj9/AYyiMuZSJtKbZe/xgn0OG30ZMP2CCjCHDxxFM0MnrdFmPCHu2l30dcb59
      z2Jio8eJlzTzhc9+hlee3sLxvghZBWVsuu8hSkIHeWLLy1ToBTzx6BOsufs7fPa6Fg6dfREn
      ZiWnUdpN32vwI0Am+lFL/g2UFcC+R5BIMThhpPMEMp2LCi9LzjfTQbgDgrehrr4a1fVLJCSo
      3EZU7QrIGkbG0+dQoZTJyhVNNEUtBvtGKYiZGDPTjEVtDBXH1VyZDpqXy9RZaHwAo74G/eaj
      yMBRVMW9qKVL4PjPkakQcDnu0OJw5IXnKL76VupLcpk5OUnYzqK4tAyvTjBt5bCoTOjpH6bQ
      E8Hj+tn966cJLN7E0nIvoyMh6lc087uXXuF4Th19Yz4qg59cg1xVWIE+9kOUTxDPVRgrPofy
      mDDThu71o9J18wPktsDkD5A9O5CIwrjxPiTejuz674jjotZekz4t4tLW1s3RiTh23OW2G5dS
      EDH5xSsnyPE6LFm+KLVEuN+X/Fo4/jN0r4lII8bSVuTIk8iEH7EKMRYkr9MHBsJcK8LOrc/T
      etsfUBnwINpi53NPcvj0CGULVvHAPbeSGO/h6d8+x2gkiwe+fj/Ht2/l9MgEABUN1/HFu1aw
      +5lf0tYTZuNd93Ht0jRZdn9EiGuBBuWdh6YP7xWD2FYyPcBQgCBWLLk+SGN/MEgGwmIJG5/P
      i2fuae/YNpYY5PjSb4sv2gZHg9c3FzRzkusAr/9CIOzDRYJFcLXGMIyLET/XRZRKfva+YjRa
      5B1bpxkyzCcfPhKsFOa7PCc/qBukMgw+2a0xMvxr5BO7HZ8hw5UgMwCuBKKRyQ4kND3fSgCQ
      xBgy1PnOmuJ5wI7GOHpmhLbOEc6MRubdbUSsGWSoA3EublVnBsAVQOIDyOt/h3T3zLcUREeR
      9sfRx3aDM58BR2Gid5Cjw1Fsx8Vx9bz6DUhiHDn4GHrfYxCJX/g8MwBSRceSxdfLHkxGieeb
      wdfBuxhVkn47wncgwtnxGIEcLxXFeSyozJvf+I+vELXuu6jyknekiGQGQIrIuR0gNagswAqn
      NxL8bi3xfuTkIVTN8mQxz5wD8vygaGwup0zZHHqzmyf3nE29JjgVNcpMJga+S0JmAKRKPA6J
      ceTUq8jAfgiH509LZArMvGQB/eB+ZKhv3qQIkFcQ5NoVDdy5oZHJyWmcj4PnEucLhpJkCmJS
      RLXcj2oBZo6gz6U5EvxuLcXLUTcvBzeCbi9FzbUBmhdE03Gsi7ZxF3EsKqurSMUuKWU5sV7k
      yGZk+DDon8HyrwCZmuArh+hkOeCVroD6UFokWQ6ojCtfrfZ7aNAiWAkbbZhk+cz3VpalVY4G
      7Vz8wPCSm5ubKYm8Yijj4xPhVgql5jnsqBSGUmRlfzyaiStlgPne1JWPweMqQ4b5I9MfIMOn
      FqVSNbL814RoxHUusd4URL+/I7JoB9EXtztFNOJehnvyZWuROS2X8wd/n2M/pBx9hb9fKojg
      Oi76kuuktUZfzharCLajM+7Q70bExTnyCM54P0bNrfiW3oh7+jnsc22owGJ8a/8Aw5ecP+rQ
      Gay2p5BEAN/G72KYMez2X+JO9uFZ9od4qhpSWguIaGToAIljL6ICVXhXfx0V68Jqfxa0i6q+
      Cd+SG+bSezXOyaexeztQOa34r74W680nkEQM3ARGyx/jq6tO7dxEhrDankBHpvGs+DaekhLs
      Iz9Bz05DVjHetX+E6TfRs2ex3/w54irQNkbzfXgKDKz250BrVM0t+BZfn9KiXETTduQke7tn
      qKwp4wtr6xnqHWBr2xDiy+bODYtoLEy2QA1NTLJlXxchrairq+WOlSW8efg0b/TNsGxpMzcv
      KT3/RzO4Qy9I9NXtoq2wxHf8uVjjpyT64g/FtW2x3/yBxHt6Lxyb2Pc31/z20gAAE0pJREFU
      Yg0OiDu2R6K7nhe76yWJHdghOjEqse1/KU7USkmLjg1IdMv/Ftd2xe56QWJtO8Q+/itJ9PWK
      dizRjiNazx07eUCirzwh2rZFJ2LJzxxLtBWR+Cv/S6zxyZS0iIhYbT+S+MkO0bEhiW3/W3Gm
      BiW29xeiLTv5v85r0a5oO6kv8fr/EevcWbGPPi6JgYH36P6wREZ65W+fe1uiti07Xj4gbwxM
      y+H2PplJODJw8rT8Yu+5C8eePt0t29uGxLYdcRxXxgb65UfPnpREPCpPPrdfOkO2QGYRDIDy
      BJI9AsLTKL+DnvBieIdI7HkM68wAZmHBhWOFAEZ+Gap4TdINIh7FrFqO8pViltQjM5FUxYDP
      j0wPJ7cSxwcQO4LbuRPryBb0zMWEOz18FLFnSOz5CdbbbyS3YU0vEu1H62I8BanHJJQ3ANEp
      JJYAdxo9PYwe68I6/FuccycvHqeMZKQ1cgI3XoJZVY3YUdzTO5K6Z0MpazFME0QYn46S5zc4
      PpBg9fJqJDLLKydGWFJ38TrZsVm6zvbzwutddE/ESUTDVDeW4/Vns6I+j97RZD5QZgAAquha
      PAVR7BO7cMfHQIUQqvA0rcJTU4oeH7vk6IuRRKXkks/mKsVS1eIrxte6BvvENpzeTvBm4Vl0
      L77lGzHzs7AO/wYuZHl6MCpW4l21CYa24oQSiNi4HS9hLroDrkCnRrNhIyS6sDoOoOMJVLAR
      /4Zv4qlbgnv6SdzJi5FvEY1z+lXM5usxTBPPkvvwtd6AGfRiHX46aW6bAllFZWys9bD38Bk6
      BiPk5XiZGB3lJy+8zbI1y1hVnXfh2KaFC/ncumYWVPh55UAXUWHOQhH0Je7amQEAoEzMJffg
      v+bzGN4KzHyNGEV4alZjllahwxEkPo2OJVBY6NAoMnYA8TagsgO4g+2INYaeHETl56YqBlWw
      nKyND+OpqMEsLEdPDaPyqjHKGhBrGpwYejaEKmlApvsx8ipRudkgCpk+iRPJx1tXeWWCTr5i
      fGu+gn/FWoysWpSaRiSAUb4I5bMR20HPjidTjJ1xnIkInrI6RFzcqRFUsBajtD6pO+VFtGLJ
      4ka+fOtyirKzaCk12ba3m5tvX8XKmnxMBU4izmTYZmp8huxgHgsqCvC7Lt5AHv3dw9iJKMd6
      IzRUJBuHZBbBADqCte/7iGNgLrgbs3QpUtJB/JX/Cv4mfNcuQA9sR5tX4Vl6J1bbT3ESufg2
      fg/DE0WPP0H8ld14ln8Lw5/qKXVwzzxPov8EKm8lvjXrkZHXsPb8GlF+vKseRuLncDqH8K65
      CU/+T4nv/AtU8Qb8BV70YBxPy8YrFnGVmU6sNzcjkod3zTcwfHGsoz/GjkcxKu7CU5aPc+QX
      GIu+iIqexLP4ayifB3BR9gDWq08hRg7eVQ9Bqq4QYrNzTwfdsxZNDTUszDM5kevj9f3HOQA0
      LWrk6kCY9ulcFgYTvPDSYWICN1zTQm1ZDq1lU/zjs+0sbW2mIZAMFGbiAHOIdpPOyqbnggOy
      aCdpO/5u12HXSUZbjeRJFHHBFTDNK5J6IDLX+M28+L9FO4Dx3lSLuS3YS4+90pz/vhjm3LnR
      SR+iy6jv/md1f1gtIjiuTlpwfsCxWmsEhWFcdLW2HY3pMTCSRrmZRtkZPr1kAmEZPvV8aHdo
      rSW59XXeHVprtCTdv+YtAzENiBNHT51FbAejaAFKZtGzc7tERg5GQW3SKCtN6NA5dDiEyinH
      KCxHAWLPoGfDGAWVc15B6UESIfTEOfAEMArrUF4DPX4aHbMwihpQOflpSxjUjsPQWIipuKa2
      spCg3yQ0PUv/dJyykgLK8pKBzQ+cAg13HeCxX+8EwJtbxL33P8jAoed5rb2b+hU38MAXNhKf
      GODJJ59iYCLCpq9+l3ULirBnevm/P3iGu7/xEIsqg0wOdLJl33E+f/c9FGV9cg1SnM7nsIcG
      MYN+3CkPvqVX4Q4eA2Vjdx7Bv+mv8QSz0qJF7BHi236IWb0Ad+AU3o1/hhkQnIPfJzHkI3Dn
      H6N86SnTFB3DfuMxtLcIFRuEwg14i0Ikjh/HLK9FFa/EU70obQOgp+sML5+coTZPGHZzuW9t
      Jb/ZeoLK6gA90y4P3bGSoMf44ClQflkT9957L3dct4yujjNEJ47w4+0nuf+BLzG4azMvnhzn
      149+n3jlKv7oD79KabaJtiJs/sEPOdh+iKGpWWb6D/Nnf/n37H11L7OJT7AzNICVwMhbhFHa
      CmKjipbhW/UAZkExZt39mGm6+QHQMVClGGWrMfw5oDW6fy+uNOOtqk+rPTriIgnBLF2NEaxG
      3Cj2yU7M5g2o4GLMsqa0pov3Dk7Sumwhd21cTW1iirdO9VLU2MydG5ZzfbGmfSDpm/qBAyA7
      WEZLSwvjfWdYdN0dLG5YSFl8mN27d9Mby2VJiUX78VEmuw/zyK+2EhPoOb6fDnMJn79hAcoQ
      cita+R9/9aeU5QU+8i/+UaOCxbj927GPPQPZtSgDxE3gdHXiWdya3oIPsxClz2CfeA531kHJ
      GPbbr2M2rkYS0WSSXLq0KB9mYS72ic3YZ99C+YNgn8Md6UWPt5E4+HRy5yhNNNSWcvjIKbbt
      O8ZrgzEsxyUr14cCAsEsEvHkg/iyFsHamuDlfee4deNV6Og0bjCP/Px8vNmKiVAMvNm0rLqe
      a2tdfvazx/nZb7ZSvKCG0dEhenrOksBPfl4WouBK969KN+5QD761f0LWpv+GSpxARxNI6ATa
      U4MZTHM55PRhpPjLZN36p/iX1mAffQMd1zhvb8Ht3oF9rjt9WuxJnDFF9mf/M1kbv4Ye6QJ/
      M77lt+NbcRfKtS6JYH/01NXX8tWNTTTWVdJamE1RMIvZUAQtwsRYlLzc5NTwgxfB4nLshc3k
      rLyVJTVFTL21k7i3gRtu2sjwG2/QM+1nUYkP18iiqaoIaRuluXUlM0Mn6OqbJHKmk5nrVhGO
      TmElLCYnJ6gIlOP3fDIHgpGXi33icdxeH9oKorwO9qEdeNf8u7QuOAEINMPYI1gH29DDvXhv
      /E94Cr+IOBGsIzX4mhal73Fj5mJkTZA48AjEx1EF1+Mpzsd67YcY+X7EqIY0lotOjI2z59gY
      sVgYX0UNLfUFtD1/lM3hIcZsHw+XJ6eqH7gIdhOzPP3zR2m959u0lOXgWjM8/uN/oGskTHbF
      Yv7tNx8k3nuIXzz1IqGwwZe+8z2uaioGEXY++0tKV91OWegoP3p6DzPhCIVlVTz47e/RVPAx
      cFb+EIibQGaHEEdj5FWDzwOxCOQE5+HdJujwCBKbRWWVoPIKk7tAoiERA39OGnfkBLEi6Jkh
      MAMYeWUoE3SoH21pzIIa8PnSdo5s22ZsMoKNQUVxLj5TEY1EGQ1ZFBblUpDtTSEQpjWW6+Ix
      PReaHri2jVbGZUXoMmT4OJCJBGf4VJOJBGf41JPJBk0R0TYSHk0mr3myUYHS9C+GL9UTHUcS
      yaIclVed9i4x79BiR5HIeDLJ0F+Ayg7OW5aAiGZmNspU2CYnkE1JfnIRnBkAKSKhHhIHf4VR
      WIMKVOFZtGleB4B9+B/RqhzlM/C0PICZN3+XWPdtw+rpxcjLQZVdjbd+5bxpiYSm2LzjDMXl
      uYyOhLn9ttVAZgCkjMQmILAAT/MtGAVlad3qex8x6LBgrrwds6gc5U9jVPo9WjR6fAijdgOe
      8nqMYBHzGQMK5Bfy8L1XJxt6b3+L6FxVWGYNkCIqpwTDVNjHniSx9ykkrd2g34UIRulidO9e
      Ei/9T9zQ7PxpAYyypTDVhX3gR1jH9pPe3Ix3olDEwjM8tfUIOfUNLCq8zGS4DP8yl54+a+d/
      wFzxX/CUBuddiz75/7Ctm8hauXzetRDpJbbnCbI3/UfUFahT/jBY0QiP/u4tVm1oZW1dEHOu
      ICYzBUoR3bsLu/csRo6D1o14gznzJybeR+KNlzDyA7gDQ3jWpeYJlBJiY7+1OVkHnxhBlaxK
      vSQyBSYnRhlwFLUDw2wbmWBVSy2QeQOkjNhh9HQf4rgY+Y2onMD8zXTFRYf60NEZVHYZRkH5
      vLpDS3wSHRoEIwujoAF83nk7N1YizuBU0gpFGQYlBbnk+s1MICzDp5dMICzDp573rAFc18Wy
      5rO3VIYM6eN9F8GfylmRCFpIdjE5X+csSS+xtHc2EZlzMbuM+uq5Yy+8zC/87pVr2HH+flCo
      +S/nSOU6vc/vZnaB5jh+opv24RgNDZVcv6CY8MwMe9r6mHU93Ly+mbLsuVMlmp6zw8x4A6ys
      yceOxzlwvI+RiEteMMD1rTXkelO7S2T6JHJyB+TWwKI7YWgXMt6b/GFgGWrx+gs+O9L5DDIx
      Bk2fQ5VXIRPtSNdrULwWmq9NOSotiWnk9PMQnoGWr6AKipOfD+1DEsUYDUveefxMFzI6gGra
      COEepGtXsjVR6TWoupUpL8rPdPXxxtkZKmtKuWFxGa4VY8+hs0zaButWN1BfkAz+RWbD7Dva
      z4wDFRVlXLcwn67OAQ72z7JscR2rapI2ipk1ABAbH2D3gHDrmnoGT/ZwNmLxyv5uyptruW1V
      DbmXdHc7e26I/SfHOTeQDDJFZyJMWAa3XFXPNQvKyE6x3l+sMaRtO2rZA+DTSM8RqFiHWnw3
      qrwJJgY4/xiWiX3oCUEtuhE59hxiTSDtr6EW3gsTr8LUZGpiAM6+COYi1JKbkOO/RWyNRLuQ
      9i0wMvxO7TqOHHsK6TqazP8ZOgSF61BL7kaVL0xZSmJ6lG1dEW5Z20Skb4CTk1H27e/CX13F
      batrKcq++DwfGZ/C9edx88o6ltfmEZqcZF9njE2rquk41kV/NBMJvoCTsDGzsglk+Wgp8tDW
      OUT3tM143zCHe6Zw3YtTwrq6Su5YU0PO3I0ethIMjIfp7B0n5krq247aQYxc8GahglXIRD8q
      qwAVKEQGTsLCWy8+1ce7UA23oYoXQI6G6V7IX4cqrkHVr0JGJlLTAojjgK8QsmtBJiE0gRzf
      jmq9F3yX9P8SDb3bIHgTKpgPaIhNIxNnkJE+UAapzp9cywFfNgG/hyUlWRw7M0rHWJzE+CgH
      O8exLunDGo+EGZsM0TUYwhGIzcxSUV9OSVEBV1Vl0ZNxh75IXmUV1fY4z+zp4LXuEIYIjmFS
      W1tCdmycbacuWpIbhgHq4okuKSli04pKPGhe3NnBUCQ11wvlL8WoL0cf+BW6Y0/SchGQyRPg
      VKLKiy4eLAZ4zt9YDrg2eOcq7bxZ4KTuwKFq18HgDuTw75BQCBnZC1EfGC6Ex5C5DROZ7UYf
      7UDV1kJ8CqIxaLoLo6IOZt5G3nyOVFvM5JSUsjgrytO732bXqQm0gGMYlFcUU6zCbD120cW7
      vr6GaxaWYMdn+M3eHhIieLwGCvB4jQsO0ZkBAKA83LZhKfdvXEJtMJdlTcWU+z2UFAdZWhMk
      ZmlsyyJqzd1QcvFaWpZNQXEhq5dWEfQ5hOLOP/9/LgsDqm7BuOEhjLrlqOIKQJBzB5NzegDX
      QmJRCBbBwHEkMQ0xBwqqYPwIkkhAXxuUFqaoBQjUo9Z9E3XVZ1CBKgjWQV4+0ncEme6A2Vkk
      PgtioKobke79SOg0MnwGHA0Vraima5H4YMoDAGWyfs1CHvjMMpqL81hWX0hFlpeCoiCLawpw
      XRfXtgjHHSxLU11VzLUtNRS4NmRnM9g/gWNbdPZHqCrJpENfRCd4fvspJkUoKy2jMT8XWZDH
      My8dJa4M7rixisHufoaMYvzhYQ72hQknNBFDuLrcw863uoiLUFRWSVNhqrXODpx5Fhk9A2YV
      atVNYI+DlKNKqwCQcBfSNYi66mbo+Xtk7w4o/wwquwqqAui9f4XKaUCVFKd8agh1IO3Pg2vC
      4gdQtQ2o2jUQ60Wfm0IVF6MP/xS18D6MNV8CHLQ3D9W0DLq3IsceBwGj+b7UUyG0xc7XOumP
      O+QH81lfGqSstZgXth0lYZhct7aZ6cFh2qYDNGXNsGtfN7Z2aWlppLokjzLjFD/ZepTymgoa
      gslbP9Moew6tNbar8Xk955eY2LYLysDr+ZdflKI1jgaPeYW2HkUQOwFeHx8Yq9Qu4joor/+8
      GMSxwPRfsboEca3kE/5DFNeIa4Myr5g7tNYay9H4fRevk+O4aDHwvasVveu6iFKYhnHB1Tpu
      a3xeE0MpAoHAe1MhPq0DIMOnj0AgkEmFyPDp5kO7QyffG++Mxp3nfbcC56J1pDuqeoURERJx
      i7hWBHOS2Y2O7TBrafKyfXjN9H47ceNg2cltU9Ocm67MXQvTf8WmHpelRTtgxcDwgtef3Bo9
      3zfN8M411EjP+RER7IRN1BVys33J9knuXD9hpS5Maz9wAEwNdvDynnYAvNlB1t94E5On3uCt
      rgEqm1dy8/rlWDPj7N61i5HpONfcdjdlepDte98CoKZ1A+sW5LF35076JyMsuGo961qbP8Kv
      /tHSdbqbHadnyMaiqL6RjbU+nt59BjNbMIIl3L+uAX+67jlnCtn9d5CdC2Eb1j2EnHoG7Bgy
      2oZa/heoBY3p0aIt5PgvYXoS3CjU3YPynEOfbkfl+KFiA6rpmvRoAYb6B3j2yAjZpia7tILP
      Ly9h88tvIdm5ZOf4ue2aZGDu/wNpk0dhyWon4AAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='384' name='Stop to Restuarant Ratios per Zipcode by Nativity' width='384'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
